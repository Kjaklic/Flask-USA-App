/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.contacts.model.impl;

import com.liferay.contacts.model.NotificationAuditLog;
import com.liferay.contacts.model.NotificationAuditLogModel;
import com.liferay.contacts.model.NotificationAuditLogSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotificationAuditLog service. Represents a row in the &quot;Contacts_NotificationAuditLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.contacts.model.NotificationAuditLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationAuditLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NotificationAuditLogImpl
 * @see com.liferay.contacts.model.NotificationAuditLog
 * @see com.liferay.contacts.model.NotificationAuditLogModel
 * @generated
 */
@JSON(strict = true)
public class NotificationAuditLogModelImpl extends BaseModelImpl<NotificationAuditLog>
	implements NotificationAuditLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification audit log model instance should use the {@link com.liferay.contacts.model.NotificationAuditLog} interface instead.
	 */
	public static final String TABLE_NAME = "Contacts_NotificationAuditLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificationAuditLogId", Types.BIGINT },
			{ "senderEmail", Types.VARCHAR },
			{ "receiverEmail", Types.VARCHAR },
			{ "messageReason", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "notificationTime", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Contacts_NotificationAuditLog (notificationAuditLogId LONG not null primary key,senderEmail VARCHAR(75) null,receiverEmail VARCHAR(75) null,messageReason VARCHAR(75) null,message VARCHAR(255) null,notificationTime DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Contacts_NotificationAuditLog";
	public static final String ORDER_BY_JPQL = " ORDER BY notificationAuditLog.notificationTime DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Contacts_NotificationAuditLog.notificationTime DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.contacts.model.NotificationAuditLog"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.contacts.model.NotificationAuditLog"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.contacts.model.NotificationAuditLog"),
			true);
	public static long RECEIVEREMAIL_COLUMN_BITMASK = 1L;
	public static long SENDEREMAIL_COLUMN_BITMASK = 2L;
	public static long NOTIFICATIONTIME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NotificationAuditLog toModel(
		NotificationAuditLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NotificationAuditLog model = new NotificationAuditLogImpl();

		model.setNotificationAuditLogId(soapModel.getNotificationAuditLogId());
		model.setSenderEmail(soapModel.getSenderEmail());
		model.setReceiverEmail(soapModel.getReceiverEmail());
		model.setMessageReason(soapModel.getMessageReason());
		model.setMessage(soapModel.getMessage());
		model.setNotificationTime(soapModel.getNotificationTime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NotificationAuditLog> toModels(
		NotificationAuditLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NotificationAuditLog> models = new ArrayList<NotificationAuditLog>(soapModels.length);

		for (NotificationAuditLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.contacts.model.NotificationAuditLog"));

	public NotificationAuditLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificationAuditLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificationAuditLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificationAuditLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NotificationAuditLog.class;
	}

	@Override
	public String getModelClassName() {
		return NotificationAuditLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificationAuditLogId", getNotificationAuditLogId());
		attributes.put("senderEmail", getSenderEmail());
		attributes.put("receiverEmail", getReceiverEmail());
		attributes.put("messageReason", getMessageReason());
		attributes.put("message", getMessage());
		attributes.put("notificationTime", getNotificationTime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificationAuditLogId = (Long)attributes.get(
				"notificationAuditLogId");

		if (notificationAuditLogId != null) {
			setNotificationAuditLogId(notificationAuditLogId);
		}

		String senderEmail = (String)attributes.get("senderEmail");

		if (senderEmail != null) {
			setSenderEmail(senderEmail);
		}

		String receiverEmail = (String)attributes.get("receiverEmail");

		if (receiverEmail != null) {
			setReceiverEmail(receiverEmail);
		}

		String messageReason = (String)attributes.get("messageReason");

		if (messageReason != null) {
			setMessageReason(messageReason);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		Date notificationTime = (Date)attributes.get("notificationTime");

		if (notificationTime != null) {
			setNotificationTime(notificationTime);
		}
	}

	@JSON
	@Override
	public long getNotificationAuditLogId() {
		return _notificationAuditLogId;
	}

	@Override
	public void setNotificationAuditLogId(long notificationAuditLogId) {
		_notificationAuditLogId = notificationAuditLogId;
	}

	@JSON
	@Override
	public String getSenderEmail() {
		if (_senderEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _senderEmail;
		}
	}

	@Override
	public void setSenderEmail(String senderEmail) {
		_columnBitmask |= SENDEREMAIL_COLUMN_BITMASK;

		if (_originalSenderEmail == null) {
			_originalSenderEmail = _senderEmail;
		}

		_senderEmail = senderEmail;
	}

	public String getOriginalSenderEmail() {
		return GetterUtil.getString(_originalSenderEmail);
	}

	@JSON
	@Override
	public String getReceiverEmail() {
		if (_receiverEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiverEmail;
		}
	}

	@Override
	public void setReceiverEmail(String receiverEmail) {
		_columnBitmask |= RECEIVEREMAIL_COLUMN_BITMASK;

		if (_originalReceiverEmail == null) {
			_originalReceiverEmail = _receiverEmail;
		}

		_receiverEmail = receiverEmail;
	}

	public String getOriginalReceiverEmail() {
		return GetterUtil.getString(_originalReceiverEmail);
	}

	@JSON
	@Override
	public String getMessageReason() {
		if (_messageReason == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageReason;
		}
	}

	@Override
	public void setMessageReason(String messageReason) {
		_messageReason = messageReason;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	@Override
	public Date getNotificationTime() {
		return _notificationTime;
	}

	@Override
	public void setNotificationTime(Date notificationTime) {
		_columnBitmask = -1L;

		_notificationTime = notificationTime;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			NotificationAuditLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NotificationAuditLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NotificationAuditLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationAuditLogImpl notificationAuditLogImpl = new NotificationAuditLogImpl();

		notificationAuditLogImpl.setNotificationAuditLogId(getNotificationAuditLogId());
		notificationAuditLogImpl.setSenderEmail(getSenderEmail());
		notificationAuditLogImpl.setReceiverEmail(getReceiverEmail());
		notificationAuditLogImpl.setMessageReason(getMessageReason());
		notificationAuditLogImpl.setMessage(getMessage());
		notificationAuditLogImpl.setNotificationTime(getNotificationTime());

		notificationAuditLogImpl.resetOriginalValues();

		return notificationAuditLogImpl;
	}

	@Override
	public int compareTo(NotificationAuditLog notificationAuditLog) {
		int value = 0;

		value = DateUtil.compareTo(getNotificationTime(),
				notificationAuditLog.getNotificationTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NotificationAuditLog)) {
			return false;
		}

		NotificationAuditLog notificationAuditLog = (NotificationAuditLog)obj;

		long primaryKey = notificationAuditLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NotificationAuditLogModelImpl notificationAuditLogModelImpl = this;

		notificationAuditLogModelImpl._originalSenderEmail = notificationAuditLogModelImpl._senderEmail;

		notificationAuditLogModelImpl._originalReceiverEmail = notificationAuditLogModelImpl._receiverEmail;

		notificationAuditLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NotificationAuditLog> toCacheModel() {
		NotificationAuditLogCacheModel notificationAuditLogCacheModel = new NotificationAuditLogCacheModel();

		notificationAuditLogCacheModel.notificationAuditLogId = getNotificationAuditLogId();

		notificationAuditLogCacheModel.senderEmail = getSenderEmail();

		String senderEmail = notificationAuditLogCacheModel.senderEmail;

		if ((senderEmail != null) && (senderEmail.length() == 0)) {
			notificationAuditLogCacheModel.senderEmail = null;
		}

		notificationAuditLogCacheModel.receiverEmail = getReceiverEmail();

		String receiverEmail = notificationAuditLogCacheModel.receiverEmail;

		if ((receiverEmail != null) && (receiverEmail.length() == 0)) {
			notificationAuditLogCacheModel.receiverEmail = null;
		}

		notificationAuditLogCacheModel.messageReason = getMessageReason();

		String messageReason = notificationAuditLogCacheModel.messageReason;

		if ((messageReason != null) && (messageReason.length() == 0)) {
			notificationAuditLogCacheModel.messageReason = null;
		}

		notificationAuditLogCacheModel.message = getMessage();

		String message = notificationAuditLogCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			notificationAuditLogCacheModel.message = null;
		}

		Date notificationTime = getNotificationTime();

		if (notificationTime != null) {
			notificationAuditLogCacheModel.notificationTime = notificationTime.getTime();
		}
		else {
			notificationAuditLogCacheModel.notificationTime = Long.MIN_VALUE;
		}

		return notificationAuditLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{notificationAuditLogId=");
		sb.append(getNotificationAuditLogId());
		sb.append(", senderEmail=");
		sb.append(getSenderEmail());
		sb.append(", receiverEmail=");
		sb.append(getReceiverEmail());
		sb.append(", messageReason=");
		sb.append(getMessageReason());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", notificationTime=");
		sb.append(getNotificationTime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.contacts.model.NotificationAuditLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificationAuditLogId</column-name><column-value><![CDATA[");
		sb.append(getNotificationAuditLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>senderEmail</column-name><column-value><![CDATA[");
		sb.append(getSenderEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiverEmail</column-name><column-value><![CDATA[");
		sb.append(getReceiverEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageReason</column-name><column-value><![CDATA[");
		sb.append(getMessageReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationTime</column-name><column-value><![CDATA[");
		sb.append(getNotificationTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NotificationAuditLog.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NotificationAuditLog.class
		};
	private long _notificationAuditLogId;
	private String _senderEmail;
	private String _originalSenderEmail;
	private String _receiverEmail;
	private String _originalReceiverEmail;
	private String _messageReason;
	private String _message;
	private Date _notificationTime;
	private long _columnBitmask;
	private NotificationAuditLog _escapedModel;
}