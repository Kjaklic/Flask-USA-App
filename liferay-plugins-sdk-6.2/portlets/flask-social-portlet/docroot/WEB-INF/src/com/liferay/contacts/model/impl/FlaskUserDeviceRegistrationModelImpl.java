/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.contacts.model.impl;

import com.liferay.contacts.model.FlaskUserDeviceRegistration;
import com.liferay.contacts.model.FlaskUserDeviceRegistrationModel;
import com.liferay.contacts.model.FlaskUserDeviceRegistrationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FlaskUserDeviceRegistration service. Represents a row in the &quot;Contacts_FlaskUserDeviceRegistration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.contacts.model.FlaskUserDeviceRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlaskUserDeviceRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FlaskUserDeviceRegistrationImpl
 * @see com.liferay.contacts.model.FlaskUserDeviceRegistration
 * @see com.liferay.contacts.model.FlaskUserDeviceRegistrationModel
 * @generated
 */
@JSON(strict = true)
public class FlaskUserDeviceRegistrationModelImpl extends BaseModelImpl<FlaskUserDeviceRegistration>
	implements FlaskUserDeviceRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flask user device registration model instance should use the {@link com.liferay.contacts.model.FlaskUserDeviceRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "Contacts_FlaskUserDeviceRegistration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userDeviceRegistrationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userEmail", Types.VARCHAR },
			{ "devicePlatform", Types.VARCHAR },
			{ "deviceDetails", Types.VARCHAR },
			{ "deviceToken", Types.VARCHAR },
			{ "registrationTime", Types.TIMESTAMP },
			{ "active_", Types.BOOLEAN },
			{ "lastNotificationTime", Types.TIMESTAMP },
			{ "lastNotificationMsg", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Contacts_FlaskUserDeviceRegistration (userDeviceRegistrationId LONG not null primary key,userId LONG,userEmail VARCHAR(75) null,devicePlatform VARCHAR(75) null,deviceDetails VARCHAR(75) null,deviceToken VARCHAR(200) null,registrationTime DATE null,active_ BOOLEAN,lastNotificationTime DATE null,lastNotificationMsg VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Contacts_FlaskUserDeviceRegistration";
	public static final String ORDER_BY_JPQL = " ORDER BY flaskUserDeviceRegistration.userDeviceRegistrationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Contacts_FlaskUserDeviceRegistration.userDeviceRegistrationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.contacts.model.FlaskUserDeviceRegistration"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.contacts.model.FlaskUserDeviceRegistration"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.contacts.model.FlaskUserDeviceRegistration"),
			true);
	public static long DEVICETOKEN_COLUMN_BITMASK = 1L;
	public static long USEREMAIL_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long USERDEVICEREGISTRATIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FlaskUserDeviceRegistration toModel(
		FlaskUserDeviceRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FlaskUserDeviceRegistration model = new FlaskUserDeviceRegistrationImpl();

		model.setUserDeviceRegistrationId(soapModel.getUserDeviceRegistrationId());
		model.setUserId(soapModel.getUserId());
		model.setUserEmail(soapModel.getUserEmail());
		model.setDevicePlatform(soapModel.getDevicePlatform());
		model.setDeviceDetails(soapModel.getDeviceDetails());
		model.setDeviceToken(soapModel.getDeviceToken());
		model.setRegistrationTime(soapModel.getRegistrationTime());
		model.setActive(soapModel.getActive());
		model.setLastNotificationTime(soapModel.getLastNotificationTime());
		model.setLastNotificationMsg(soapModel.getLastNotificationMsg());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FlaskUserDeviceRegistration> toModels(
		FlaskUserDeviceRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FlaskUserDeviceRegistration> models = new ArrayList<FlaskUserDeviceRegistration>(soapModels.length);

		for (FlaskUserDeviceRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.contacts.model.FlaskUserDeviceRegistration"));

	public FlaskUserDeviceRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userDeviceRegistrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserDeviceRegistrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userDeviceRegistrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FlaskUserDeviceRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return FlaskUserDeviceRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userDeviceRegistrationId", getUserDeviceRegistrationId());
		attributes.put("userId", getUserId());
		attributes.put("userEmail", getUserEmail());
		attributes.put("devicePlatform", getDevicePlatform());
		attributes.put("deviceDetails", getDeviceDetails());
		attributes.put("deviceToken", getDeviceToken());
		attributes.put("registrationTime", getRegistrationTime());
		attributes.put("active", getActive());
		attributes.put("lastNotificationTime", getLastNotificationTime());
		attributes.put("lastNotificationMsg", getLastNotificationMsg());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userDeviceRegistrationId = (Long)attributes.get(
				"userDeviceRegistrationId");

		if (userDeviceRegistrationId != null) {
			setUserDeviceRegistrationId(userDeviceRegistrationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userEmail = (String)attributes.get("userEmail");

		if (userEmail != null) {
			setUserEmail(userEmail);
		}

		String devicePlatform = (String)attributes.get("devicePlatform");

		if (devicePlatform != null) {
			setDevicePlatform(devicePlatform);
		}

		String deviceDetails = (String)attributes.get("deviceDetails");

		if (deviceDetails != null) {
			setDeviceDetails(deviceDetails);
		}

		String deviceToken = (String)attributes.get("deviceToken");

		if (deviceToken != null) {
			setDeviceToken(deviceToken);
		}

		Date registrationTime = (Date)attributes.get("registrationTime");

		if (registrationTime != null) {
			setRegistrationTime(registrationTime);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Date lastNotificationTime = (Date)attributes.get("lastNotificationTime");

		if (lastNotificationTime != null) {
			setLastNotificationTime(lastNotificationTime);
		}

		String lastNotificationMsg = (String)attributes.get(
				"lastNotificationMsg");

		if (lastNotificationMsg != null) {
			setLastNotificationMsg(lastNotificationMsg);
		}
	}

	@JSON
	@Override
	public long getUserDeviceRegistrationId() {
		return _userDeviceRegistrationId;
	}

	@Override
	public void setUserDeviceRegistrationId(long userDeviceRegistrationId) {
		_userDeviceRegistrationId = userDeviceRegistrationId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserEmail() {
		if (_userEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _userEmail;
		}
	}

	@Override
	public void setUserEmail(String userEmail) {
		_columnBitmask |= USEREMAIL_COLUMN_BITMASK;

		if (_originalUserEmail == null) {
			_originalUserEmail = _userEmail;
		}

		_userEmail = userEmail;
	}

	public String getOriginalUserEmail() {
		return GetterUtil.getString(_originalUserEmail);
	}

	@JSON
	@Override
	public String getDevicePlatform() {
		if (_devicePlatform == null) {
			return StringPool.BLANK;
		}
		else {
			return _devicePlatform;
		}
	}

	@Override
	public void setDevicePlatform(String devicePlatform) {
		_devicePlatform = devicePlatform;
	}

	@JSON
	@Override
	public String getDeviceDetails() {
		if (_deviceDetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceDetails;
		}
	}

	@Override
	public void setDeviceDetails(String deviceDetails) {
		_deviceDetails = deviceDetails;
	}

	@JSON
	@Override
	public String getDeviceToken() {
		if (_deviceToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceToken;
		}
	}

	@Override
	public void setDeviceToken(String deviceToken) {
		_columnBitmask |= DEVICETOKEN_COLUMN_BITMASK;

		if (_originalDeviceToken == null) {
			_originalDeviceToken = _deviceToken;
		}

		_deviceToken = deviceToken;
	}

	public String getOriginalDeviceToken() {
		return GetterUtil.getString(_originalDeviceToken);
	}

	@JSON
	@Override
	public Date getRegistrationTime() {
		return _registrationTime;
	}

	@Override
	public void setRegistrationTime(Date registrationTime) {
		_registrationTime = registrationTime;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	@Override
	public Date getLastNotificationTime() {
		return _lastNotificationTime;
	}

	@Override
	public void setLastNotificationTime(Date lastNotificationTime) {
		_lastNotificationTime = lastNotificationTime;
	}

	@JSON
	@Override
	public String getLastNotificationMsg() {
		if (_lastNotificationMsg == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastNotificationMsg;
		}
	}

	@Override
	public void setLastNotificationMsg(String lastNotificationMsg) {
		_lastNotificationMsg = lastNotificationMsg;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FlaskUserDeviceRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FlaskUserDeviceRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FlaskUserDeviceRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlaskUserDeviceRegistrationImpl flaskUserDeviceRegistrationImpl = new FlaskUserDeviceRegistrationImpl();

		flaskUserDeviceRegistrationImpl.setUserDeviceRegistrationId(getUserDeviceRegistrationId());
		flaskUserDeviceRegistrationImpl.setUserId(getUserId());
		flaskUserDeviceRegistrationImpl.setUserEmail(getUserEmail());
		flaskUserDeviceRegistrationImpl.setDevicePlatform(getDevicePlatform());
		flaskUserDeviceRegistrationImpl.setDeviceDetails(getDeviceDetails());
		flaskUserDeviceRegistrationImpl.setDeviceToken(getDeviceToken());
		flaskUserDeviceRegistrationImpl.setRegistrationTime(getRegistrationTime());
		flaskUserDeviceRegistrationImpl.setActive(getActive());
		flaskUserDeviceRegistrationImpl.setLastNotificationTime(getLastNotificationTime());
		flaskUserDeviceRegistrationImpl.setLastNotificationMsg(getLastNotificationMsg());

		flaskUserDeviceRegistrationImpl.resetOriginalValues();

		return flaskUserDeviceRegistrationImpl;
	}

	@Override
	public int compareTo(
		FlaskUserDeviceRegistration flaskUserDeviceRegistration) {
		long primaryKey = flaskUserDeviceRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FlaskUserDeviceRegistration)) {
			return false;
		}

		FlaskUserDeviceRegistration flaskUserDeviceRegistration = (FlaskUserDeviceRegistration)obj;

		long primaryKey = flaskUserDeviceRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FlaskUserDeviceRegistrationModelImpl flaskUserDeviceRegistrationModelImpl =
			this;

		flaskUserDeviceRegistrationModelImpl._originalUserId = flaskUserDeviceRegistrationModelImpl._userId;

		flaskUserDeviceRegistrationModelImpl._setOriginalUserId = false;

		flaskUserDeviceRegistrationModelImpl._originalUserEmail = flaskUserDeviceRegistrationModelImpl._userEmail;

		flaskUserDeviceRegistrationModelImpl._originalDeviceToken = flaskUserDeviceRegistrationModelImpl._deviceToken;

		flaskUserDeviceRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FlaskUserDeviceRegistration> toCacheModel() {
		FlaskUserDeviceRegistrationCacheModel flaskUserDeviceRegistrationCacheModel =
			new FlaskUserDeviceRegistrationCacheModel();

		flaskUserDeviceRegistrationCacheModel.userDeviceRegistrationId = getUserDeviceRegistrationId();

		flaskUserDeviceRegistrationCacheModel.userId = getUserId();

		flaskUserDeviceRegistrationCacheModel.userEmail = getUserEmail();

		String userEmail = flaskUserDeviceRegistrationCacheModel.userEmail;

		if ((userEmail != null) && (userEmail.length() == 0)) {
			flaskUserDeviceRegistrationCacheModel.userEmail = null;
		}

		flaskUserDeviceRegistrationCacheModel.devicePlatform = getDevicePlatform();

		String devicePlatform = flaskUserDeviceRegistrationCacheModel.devicePlatform;

		if ((devicePlatform != null) && (devicePlatform.length() == 0)) {
			flaskUserDeviceRegistrationCacheModel.devicePlatform = null;
		}

		flaskUserDeviceRegistrationCacheModel.deviceDetails = getDeviceDetails();

		String deviceDetails = flaskUserDeviceRegistrationCacheModel.deviceDetails;

		if ((deviceDetails != null) && (deviceDetails.length() == 0)) {
			flaskUserDeviceRegistrationCacheModel.deviceDetails = null;
		}

		flaskUserDeviceRegistrationCacheModel.deviceToken = getDeviceToken();

		String deviceToken = flaskUserDeviceRegistrationCacheModel.deviceToken;

		if ((deviceToken != null) && (deviceToken.length() == 0)) {
			flaskUserDeviceRegistrationCacheModel.deviceToken = null;
		}

		Date registrationTime = getRegistrationTime();

		if (registrationTime != null) {
			flaskUserDeviceRegistrationCacheModel.registrationTime = registrationTime.getTime();
		}
		else {
			flaskUserDeviceRegistrationCacheModel.registrationTime = Long.MIN_VALUE;
		}

		flaskUserDeviceRegistrationCacheModel.active = getActive();

		Date lastNotificationTime = getLastNotificationTime();

		if (lastNotificationTime != null) {
			flaskUserDeviceRegistrationCacheModel.lastNotificationTime = lastNotificationTime.getTime();
		}
		else {
			flaskUserDeviceRegistrationCacheModel.lastNotificationTime = Long.MIN_VALUE;
		}

		flaskUserDeviceRegistrationCacheModel.lastNotificationMsg = getLastNotificationMsg();

		String lastNotificationMsg = flaskUserDeviceRegistrationCacheModel.lastNotificationMsg;

		if ((lastNotificationMsg != null) &&
				(lastNotificationMsg.length() == 0)) {
			flaskUserDeviceRegistrationCacheModel.lastNotificationMsg = null;
		}

		return flaskUserDeviceRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{userDeviceRegistrationId=");
		sb.append(getUserDeviceRegistrationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userEmail=");
		sb.append(getUserEmail());
		sb.append(", devicePlatform=");
		sb.append(getDevicePlatform());
		sb.append(", deviceDetails=");
		sb.append(getDeviceDetails());
		sb.append(", deviceToken=");
		sb.append(getDeviceToken());
		sb.append(", registrationTime=");
		sb.append(getRegistrationTime());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", lastNotificationTime=");
		sb.append(getLastNotificationTime());
		sb.append(", lastNotificationMsg=");
		sb.append(getLastNotificationMsg());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.contacts.model.FlaskUserDeviceRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userDeviceRegistrationId</column-name><column-value><![CDATA[");
		sb.append(getUserDeviceRegistrationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userEmail</column-name><column-value><![CDATA[");
		sb.append(getUserEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>devicePlatform</column-name><column-value><![CDATA[");
		sb.append(getDevicePlatform());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceDetails</column-name><column-value><![CDATA[");
		sb.append(getDeviceDetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceToken</column-name><column-value><![CDATA[");
		sb.append(getDeviceToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationTime</column-name><column-value><![CDATA[");
		sb.append(getRegistrationTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastNotificationTime</column-name><column-value><![CDATA[");
		sb.append(getLastNotificationTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastNotificationMsg</column-name><column-value><![CDATA[");
		sb.append(getLastNotificationMsg());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FlaskUserDeviceRegistration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FlaskUserDeviceRegistration.class
		};
	private long _userDeviceRegistrationId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userEmail;
	private String _originalUserEmail;
	private String _devicePlatform;
	private String _deviceDetails;
	private String _deviceToken;
	private String _originalDeviceToken;
	private Date _registrationTime;
	private boolean _active;
	private Date _lastNotificationTime;
	private String _lastNotificationMsg;
	private long _columnBitmask;
	private FlaskUserDeviceRegistration _escapedModel;
}