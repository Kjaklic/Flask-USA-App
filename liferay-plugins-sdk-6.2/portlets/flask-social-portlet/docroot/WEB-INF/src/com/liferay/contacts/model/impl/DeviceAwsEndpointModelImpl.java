/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.contacts.model.impl;

import com.liferay.contacts.model.DeviceAwsEndpoint;
import com.liferay.contacts.model.DeviceAwsEndpointModel;
import com.liferay.contacts.model.DeviceAwsEndpointSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DeviceAwsEndpoint service. Represents a row in the &quot;Contacts_DeviceAwsEndpoint&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.contacts.model.DeviceAwsEndpointModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeviceAwsEndpointImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DeviceAwsEndpointImpl
 * @see com.liferay.contacts.model.DeviceAwsEndpoint
 * @see com.liferay.contacts.model.DeviceAwsEndpointModel
 * @generated
 */
@JSON(strict = true)
public class DeviceAwsEndpointModelImpl extends BaseModelImpl<DeviceAwsEndpoint>
	implements DeviceAwsEndpointModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a device aws endpoint model instance should use the {@link com.liferay.contacts.model.DeviceAwsEndpoint} interface instead.
	 */
	public static final String TABLE_NAME = "Contacts_DeviceAwsEndpoint";
	public static final Object[][] TABLE_COLUMNS = {
			{ "deviceEndPointId", Types.BIGINT },
			{ "awsEndpoint", Types.VARCHAR },
			{ "userDeviceRegistrationId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Contacts_DeviceAwsEndpoint (deviceEndPointId LONG not null primary key,awsEndpoint VARCHAR(75) null,userDeviceRegistrationId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Contacts_DeviceAwsEndpoint";
	public static final String ORDER_BY_JPQL = " ORDER BY deviceAwsEndpoint.deviceEndPointId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Contacts_DeviceAwsEndpoint.deviceEndPointId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.contacts.model.DeviceAwsEndpoint"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.contacts.model.DeviceAwsEndpoint"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.contacts.model.DeviceAwsEndpoint"),
			true);
	public static long USERDEVICEREGISTRATIONID_COLUMN_BITMASK = 1L;
	public static long DEVICEENDPOINTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DeviceAwsEndpoint toModel(DeviceAwsEndpointSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DeviceAwsEndpoint model = new DeviceAwsEndpointImpl();

		model.setDeviceEndPointId(soapModel.getDeviceEndPointId());
		model.setAwsEndpoint(soapModel.getAwsEndpoint());
		model.setUserDeviceRegistrationId(soapModel.getUserDeviceRegistrationId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DeviceAwsEndpoint> toModels(
		DeviceAwsEndpointSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DeviceAwsEndpoint> models = new ArrayList<DeviceAwsEndpoint>(soapModels.length);

		for (DeviceAwsEndpointSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.contacts.model.DeviceAwsEndpoint"));

	public DeviceAwsEndpointModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _deviceEndPointId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDeviceEndPointId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deviceEndPointId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DeviceAwsEndpoint.class;
	}

	@Override
	public String getModelClassName() {
		return DeviceAwsEndpoint.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("deviceEndPointId", getDeviceEndPointId());
		attributes.put("awsEndpoint", getAwsEndpoint());
		attributes.put("userDeviceRegistrationId", getUserDeviceRegistrationId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long deviceEndPointId = (Long)attributes.get("deviceEndPointId");

		if (deviceEndPointId != null) {
			setDeviceEndPointId(deviceEndPointId);
		}

		String awsEndpoint = (String)attributes.get("awsEndpoint");

		if (awsEndpoint != null) {
			setAwsEndpoint(awsEndpoint);
		}

		Long userDeviceRegistrationId = (Long)attributes.get(
				"userDeviceRegistrationId");

		if (userDeviceRegistrationId != null) {
			setUserDeviceRegistrationId(userDeviceRegistrationId);
		}
	}

	@JSON
	@Override
	public long getDeviceEndPointId() {
		return _deviceEndPointId;
	}

	@Override
	public void setDeviceEndPointId(long deviceEndPointId) {
		_deviceEndPointId = deviceEndPointId;
	}

	@JSON
	@Override
	public String getAwsEndpoint() {
		if (_awsEndpoint == null) {
			return StringPool.BLANK;
		}
		else {
			return _awsEndpoint;
		}
	}

	@Override
	public void setAwsEndpoint(String awsEndpoint) {
		_awsEndpoint = awsEndpoint;
	}

	@JSON
	@Override
	public long getUserDeviceRegistrationId() {
		return _userDeviceRegistrationId;
	}

	@Override
	public void setUserDeviceRegistrationId(long userDeviceRegistrationId) {
		_columnBitmask |= USERDEVICEREGISTRATIONID_COLUMN_BITMASK;

		if (!_setOriginalUserDeviceRegistrationId) {
			_setOriginalUserDeviceRegistrationId = true;

			_originalUserDeviceRegistrationId = _userDeviceRegistrationId;
		}

		_userDeviceRegistrationId = userDeviceRegistrationId;
	}

	public long getOriginalUserDeviceRegistrationId() {
		return _originalUserDeviceRegistrationId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DeviceAwsEndpoint.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DeviceAwsEndpoint toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DeviceAwsEndpoint)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeviceAwsEndpointImpl deviceAwsEndpointImpl = new DeviceAwsEndpointImpl();

		deviceAwsEndpointImpl.setDeviceEndPointId(getDeviceEndPointId());
		deviceAwsEndpointImpl.setAwsEndpoint(getAwsEndpoint());
		deviceAwsEndpointImpl.setUserDeviceRegistrationId(getUserDeviceRegistrationId());

		deviceAwsEndpointImpl.resetOriginalValues();

		return deviceAwsEndpointImpl;
	}

	@Override
	public int compareTo(DeviceAwsEndpoint deviceAwsEndpoint) {
		long primaryKey = deviceAwsEndpoint.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DeviceAwsEndpoint)) {
			return false;
		}

		DeviceAwsEndpoint deviceAwsEndpoint = (DeviceAwsEndpoint)obj;

		long primaryKey = deviceAwsEndpoint.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DeviceAwsEndpointModelImpl deviceAwsEndpointModelImpl = this;

		deviceAwsEndpointModelImpl._originalUserDeviceRegistrationId = deviceAwsEndpointModelImpl._userDeviceRegistrationId;

		deviceAwsEndpointModelImpl._setOriginalUserDeviceRegistrationId = false;

		deviceAwsEndpointModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DeviceAwsEndpoint> toCacheModel() {
		DeviceAwsEndpointCacheModel deviceAwsEndpointCacheModel = new DeviceAwsEndpointCacheModel();

		deviceAwsEndpointCacheModel.deviceEndPointId = getDeviceEndPointId();

		deviceAwsEndpointCacheModel.awsEndpoint = getAwsEndpoint();

		String awsEndpoint = deviceAwsEndpointCacheModel.awsEndpoint;

		if ((awsEndpoint != null) && (awsEndpoint.length() == 0)) {
			deviceAwsEndpointCacheModel.awsEndpoint = null;
		}

		deviceAwsEndpointCacheModel.userDeviceRegistrationId = getUserDeviceRegistrationId();

		return deviceAwsEndpointCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{deviceEndPointId=");
		sb.append(getDeviceEndPointId());
		sb.append(", awsEndpoint=");
		sb.append(getAwsEndpoint());
		sb.append(", userDeviceRegistrationId=");
		sb.append(getUserDeviceRegistrationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.contacts.model.DeviceAwsEndpoint");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>deviceEndPointId</column-name><column-value><![CDATA[");
		sb.append(getDeviceEndPointId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>awsEndpoint</column-name><column-value><![CDATA[");
		sb.append(getAwsEndpoint());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userDeviceRegistrationId</column-name><column-value><![CDATA[");
		sb.append(getUserDeviceRegistrationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DeviceAwsEndpoint.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DeviceAwsEndpoint.class
		};
	private long _deviceEndPointId;
	private String _awsEndpoint;
	private long _userDeviceRegistrationId;
	private long _originalUserDeviceRegistrationId;
	private boolean _setOriginalUserDeviceRegistrationId;
	private long _columnBitmask;
	private DeviceAwsEndpoint _escapedModel;
}