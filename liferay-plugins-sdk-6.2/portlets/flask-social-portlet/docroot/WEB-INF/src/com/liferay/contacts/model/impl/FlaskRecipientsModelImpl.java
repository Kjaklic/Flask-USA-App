/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.contacts.model.impl;

import com.liferay.contacts.model.FlaskRecipients;
import com.liferay.contacts.model.FlaskRecipientsModel;
import com.liferay.contacts.model.FlaskRecipientsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FlaskRecipients service. Represents a row in the &quot;Contacts_FlaskRecipients&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.contacts.model.FlaskRecipientsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlaskRecipientsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FlaskRecipientsImpl
 * @see com.liferay.contacts.model.FlaskRecipients
 * @see com.liferay.contacts.model.FlaskRecipientsModel
 * @generated
 */
@JSON(strict = true)
public class FlaskRecipientsModelImpl extends BaseModelImpl<FlaskRecipients>
	implements FlaskRecipientsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flask recipients model instance should use the {@link com.liferay.contacts.model.FlaskRecipients} interface instead.
	 */
	public static final String TABLE_NAME = "Contacts_FlaskRecipients";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recipientId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "email", Types.VARCHAR },
			{ "messageId", Types.BIGINT },
			{ "read_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Contacts_FlaskRecipients (recipientId LONG not null primary key,userId LONG,email VARCHAR(75) null,messageId LONG,read_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Contacts_FlaskRecipients";
	public static final String ORDER_BY_JPQL = " ORDER BY flaskRecipients.recipientId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Contacts_FlaskRecipients.recipientId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.contacts.model.FlaskRecipients"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.contacts.model.FlaskRecipients"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.contacts.model.FlaskRecipients"),
			true);
	public static long MESSAGEID_COLUMN_BITMASK = 1L;
	public static long READ_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long RECIPIENTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FlaskRecipients toModel(FlaskRecipientsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FlaskRecipients model = new FlaskRecipientsImpl();

		model.setRecipientId(soapModel.getRecipientId());
		model.setUserId(soapModel.getUserId());
		model.setEmail(soapModel.getEmail());
		model.setMessageId(soapModel.getMessageId());
		model.setRead(soapModel.getRead());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FlaskRecipients> toModels(
		FlaskRecipientsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FlaskRecipients> models = new ArrayList<FlaskRecipients>(soapModels.length);

		for (FlaskRecipientsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.contacts.model.FlaskRecipients"));

	public FlaskRecipientsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recipientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecipientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recipientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FlaskRecipients.class;
	}

	@Override
	public String getModelClassName() {
		return FlaskRecipients.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recipientId", getRecipientId());
		attributes.put("userId", getUserId());
		attributes.put("email", getEmail());
		attributes.put("messageId", getMessageId());
		attributes.put("read", getRead());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recipientId = (Long)attributes.get("recipientId");

		if (recipientId != null) {
			setRecipientId(recipientId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long messageId = (Long)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}

		Boolean read = (Boolean)attributes.get("read");

		if (read != null) {
			setRead(read);
		}
	}

	@JSON
	@Override
	public long getRecipientId() {
		return _recipientId;
	}

	@Override
	public void setRecipientId(long recipientId) {
		_recipientId = recipientId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public long getMessageId() {
		return _messageId;
	}

	@Override
	public void setMessageId(long messageId) {
		_columnBitmask |= MESSAGEID_COLUMN_BITMASK;

		if (!_setOriginalMessageId) {
			_setOriginalMessageId = true;

			_originalMessageId = _messageId;
		}

		_messageId = messageId;
	}

	public long getOriginalMessageId() {
		return _originalMessageId;
	}

	@JSON
	@Override
	public boolean getRead() {
		return _read;
	}

	@Override
	public boolean isRead() {
		return _read;
	}

	@Override
	public void setRead(boolean read) {
		_columnBitmask |= READ_COLUMN_BITMASK;

		if (!_setOriginalRead) {
			_setOriginalRead = true;

			_originalRead = _read;
		}

		_read = read;
	}

	public boolean getOriginalRead() {
		return _originalRead;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FlaskRecipients.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FlaskRecipients toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FlaskRecipients)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlaskRecipientsImpl flaskRecipientsImpl = new FlaskRecipientsImpl();

		flaskRecipientsImpl.setRecipientId(getRecipientId());
		flaskRecipientsImpl.setUserId(getUserId());
		flaskRecipientsImpl.setEmail(getEmail());
		flaskRecipientsImpl.setMessageId(getMessageId());
		flaskRecipientsImpl.setRead(getRead());

		flaskRecipientsImpl.resetOriginalValues();

		return flaskRecipientsImpl;
	}

	@Override
	public int compareTo(FlaskRecipients flaskRecipients) {
		long primaryKey = flaskRecipients.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FlaskRecipients)) {
			return false;
		}

		FlaskRecipients flaskRecipients = (FlaskRecipients)obj;

		long primaryKey = flaskRecipients.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FlaskRecipientsModelImpl flaskRecipientsModelImpl = this;

		flaskRecipientsModelImpl._originalUserId = flaskRecipientsModelImpl._userId;

		flaskRecipientsModelImpl._setOriginalUserId = false;

		flaskRecipientsModelImpl._originalMessageId = flaskRecipientsModelImpl._messageId;

		flaskRecipientsModelImpl._setOriginalMessageId = false;

		flaskRecipientsModelImpl._originalRead = flaskRecipientsModelImpl._read;

		flaskRecipientsModelImpl._setOriginalRead = false;

		flaskRecipientsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FlaskRecipients> toCacheModel() {
		FlaskRecipientsCacheModel flaskRecipientsCacheModel = new FlaskRecipientsCacheModel();

		flaskRecipientsCacheModel.recipientId = getRecipientId();

		flaskRecipientsCacheModel.userId = getUserId();

		flaskRecipientsCacheModel.email = getEmail();

		String email = flaskRecipientsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			flaskRecipientsCacheModel.email = null;
		}

		flaskRecipientsCacheModel.messageId = getMessageId();

		flaskRecipientsCacheModel.read = getRead();

		return flaskRecipientsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{recipientId=");
		sb.append(getRecipientId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", messageId=");
		sb.append(getMessageId());
		sb.append(", read=");
		sb.append(getRead());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.contacts.model.FlaskRecipients");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recipientId</column-name><column-value><![CDATA[");
		sb.append(getRecipientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>read</column-name><column-value><![CDATA[");
		sb.append(getRead());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FlaskRecipients.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FlaskRecipients.class
		};
	private long _recipientId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _email;
	private long _messageId;
	private long _originalMessageId;
	private boolean _setOriginalMessageId;
	private boolean _read;
	private boolean _originalRead;
	private boolean _setOriginalRead;
	private long _columnBitmask;
	private FlaskRecipients _escapedModel;
}