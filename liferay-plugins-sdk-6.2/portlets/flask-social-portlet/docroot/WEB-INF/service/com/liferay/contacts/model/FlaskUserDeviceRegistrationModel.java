/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.contacts.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the FlaskUserDeviceRegistration service. Represents a row in the &quot;Contacts_FlaskUserDeviceRegistration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.contacts.model.impl.FlaskUserDeviceRegistrationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.contacts.model.impl.FlaskUserDeviceRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FlaskUserDeviceRegistration
 * @see com.liferay.contacts.model.impl.FlaskUserDeviceRegistrationImpl
 * @see com.liferay.contacts.model.impl.FlaskUserDeviceRegistrationModelImpl
 * @generated
 */
public interface FlaskUserDeviceRegistrationModel extends BaseModel<FlaskUserDeviceRegistration> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a flask user device registration model instance should use the {@link FlaskUserDeviceRegistration} interface instead.
	 */

	/**
	 * Returns the primary key of this flask user device registration.
	 *
	 * @return the primary key of this flask user device registration
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this flask user device registration.
	 *
	 * @param primaryKey the primary key of this flask user device registration
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the user device registration ID of this flask user device registration.
	 *
	 * @return the user device registration ID of this flask user device registration
	 */
	public long getUserDeviceRegistrationId();

	/**
	 * Sets the user device registration ID of this flask user device registration.
	 *
	 * @param userDeviceRegistrationId the user device registration ID of this flask user device registration
	 */
	public void setUserDeviceRegistrationId(long userDeviceRegistrationId);

	/**
	 * Returns the user ID of this flask user device registration.
	 *
	 * @return the user ID of this flask user device registration
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this flask user device registration.
	 *
	 * @param userId the user ID of this flask user device registration
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this flask user device registration.
	 *
	 * @return the user uuid of this flask user device registration
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this flask user device registration.
	 *
	 * @param userUuid the user uuid of this flask user device registration
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user email of this flask user device registration.
	 *
	 * @return the user email of this flask user device registration
	 */
	@AutoEscape
	public String getUserEmail();

	/**
	 * Sets the user email of this flask user device registration.
	 *
	 * @param userEmail the user email of this flask user device registration
	 */
	public void setUserEmail(String userEmail);

	/**
	 * Returns the device platform of this flask user device registration.
	 *
	 * @return the device platform of this flask user device registration
	 */
	@AutoEscape
	public String getDevicePlatform();

	/**
	 * Sets the device platform of this flask user device registration.
	 *
	 * @param devicePlatform the device platform of this flask user device registration
	 */
	public void setDevicePlatform(String devicePlatform);

	/**
	 * Returns the device details of this flask user device registration.
	 *
	 * @return the device details of this flask user device registration
	 */
	@AutoEscape
	public String getDeviceDetails();

	/**
	 * Sets the device details of this flask user device registration.
	 *
	 * @param deviceDetails the device details of this flask user device registration
	 */
	public void setDeviceDetails(String deviceDetails);

	/**
	 * Returns the device token of this flask user device registration.
	 *
	 * @return the device token of this flask user device registration
	 */
	@AutoEscape
	public String getDeviceToken();

	/**
	 * Sets the device token of this flask user device registration.
	 *
	 * @param deviceToken the device token of this flask user device registration
	 */
	public void setDeviceToken(String deviceToken);

	/**
	 * Returns the registration time of this flask user device registration.
	 *
	 * @return the registration time of this flask user device registration
	 */
	public Date getRegistrationTime();

	/**
	 * Sets the registration time of this flask user device registration.
	 *
	 * @param registrationTime the registration time of this flask user device registration
	 */
	public void setRegistrationTime(Date registrationTime);

	/**
	 * Returns the active of this flask user device registration.
	 *
	 * @return the active of this flask user device registration
	 */
	public boolean getActive();

	/**
	 * Returns <code>true</code> if this flask user device registration is active.
	 *
	 * @return <code>true</code> if this flask user device registration is active; <code>false</code> otherwise
	 */
	public boolean isActive();

	/**
	 * Sets whether this flask user device registration is active.
	 *
	 * @param active the active of this flask user device registration
	 */
	public void setActive(boolean active);

	/**
	 * Returns the last notification time of this flask user device registration.
	 *
	 * @return the last notification time of this flask user device registration
	 */
	public Date getLastNotificationTime();

	/**
	 * Sets the last notification time of this flask user device registration.
	 *
	 * @param lastNotificationTime the last notification time of this flask user device registration
	 */
	public void setLastNotificationTime(Date lastNotificationTime);

	/**
	 * Returns the last notification msg of this flask user device registration.
	 *
	 * @return the last notification msg of this flask user device registration
	 */
	@AutoEscape
	public String getLastNotificationMsg();

	/**
	 * Sets the last notification msg of this flask user device registration.
	 *
	 * @param lastNotificationMsg the last notification msg of this flask user device registration
	 */
	public void setLastNotificationMsg(String lastNotificationMsg);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		com.liferay.contacts.model.FlaskUserDeviceRegistration flaskUserDeviceRegistration);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.liferay.contacts.model.FlaskUserDeviceRegistration> toCacheModel();

	@Override
	public com.liferay.contacts.model.FlaskUserDeviceRegistration toEscapedModel();

	@Override
	public com.liferay.contacts.model.FlaskUserDeviceRegistration toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}