/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.AdCustomer;
import com.rumbasolutions.flask.model.AdCustomerModel;
import com.rumbasolutions.flask.model.AdCustomerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AdCustomer service. Represents a row in the &quot;flaskads_AdCustomer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.AdCustomerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdCustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AdCustomerImpl
 * @see com.rumbasolutions.flask.model.AdCustomer
 * @see com.rumbasolutions.flask.model.AdCustomerModel
 * @generated
 */
@JSON(strict = true)
public class AdCustomerModelImpl extends BaseModelImpl<AdCustomer>
	implements AdCustomerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ad customer model instance should use the {@link com.rumbasolutions.flask.model.AdCustomer} interface instead.
	 */
	public static final String TABLE_NAME = "flaskads_AdCustomer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "customerId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "customerName", Types.VARCHAR },
			{ "businessType", Types.VARCHAR },
			{ "addrLine1", Types.VARCHAR },
			{ "addrLine2", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR },
			{ "stateId", Types.BIGINT },
			{ "countryId", Types.BIGINT },
			{ "email", Types.VARCHAR },
			{ "websiteURL", Types.VARCHAR },
			{ "businessPhoneNumber", Types.VARCHAR },
			{ "contactPersonName", Types.VARCHAR },
			{ "contactPersonNumber", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskads_AdCustomer (customerId LONG not null primary key,userId LONG,createdDate DATE null,modifiedDate DATE null,customerName VARCHAR(100) null,businessType VARCHAR(100) null,addrLine1 VARCHAR(100) null,addrLine2 VARCHAR(100) null,city VARCHAR(75) null,zipCode VARCHAR(75) null,stateId LONG,countryId LONG,email VARCHAR(255) null,websiteURL VARCHAR(255) null,businessPhoneNumber VARCHAR(75) null,contactPersonName VARCHAR(255) null,contactPersonNumber VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskads_AdCustomer";
	public static final String ORDER_BY_JPQL = " ORDER BY adCustomer.customerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskads_AdCustomer.customerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.AdCustomer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.AdCustomer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.AdCustomer"),
			true);
	public static long CONTACTPERSONNAME_COLUMN_BITMASK = 1L;
	public static long CUSTOMERNAME_COLUMN_BITMASK = 2L;
	public static long CUSTOMERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AdCustomer toModel(AdCustomerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AdCustomer model = new AdCustomerImpl();

		model.setCustomerId(soapModel.getCustomerId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCustomerName(soapModel.getCustomerName());
		model.setBusinessType(soapModel.getBusinessType());
		model.setAddrLine1(soapModel.getAddrLine1());
		model.setAddrLine2(soapModel.getAddrLine2());
		model.setCity(soapModel.getCity());
		model.setZipCode(soapModel.getZipCode());
		model.setStateId(soapModel.getStateId());
		model.setCountryId(soapModel.getCountryId());
		model.setEmail(soapModel.getEmail());
		model.setWebsiteURL(soapModel.getWebsiteURL());
		model.setBusinessPhoneNumber(soapModel.getBusinessPhoneNumber());
		model.setContactPersonName(soapModel.getContactPersonName());
		model.setContactPersonNumber(soapModel.getContactPersonNumber());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AdCustomer> toModels(AdCustomerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AdCustomer> models = new ArrayList<AdCustomer>(soapModels.length);

		for (AdCustomerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.AdCustomer"));

	public AdCustomerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdCustomer.class;
	}

	@Override
	public String getModelClassName() {
		return AdCustomer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("customerId", getCustomerId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("customerName", getCustomerName());
		attributes.put("businessType", getBusinessType());
		attributes.put("addrLine1", getAddrLine1());
		attributes.put("addrLine2", getAddrLine2());
		attributes.put("city", getCity());
		attributes.put("zipCode", getZipCode());
		attributes.put("stateId", getStateId());
		attributes.put("countryId", getCountryId());
		attributes.put("email", getEmail());
		attributes.put("websiteURL", getWebsiteURL());
		attributes.put("businessPhoneNumber", getBusinessPhoneNumber());
		attributes.put("contactPersonName", getContactPersonName());
		attributes.put("contactPersonNumber", getContactPersonNumber());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long customerId = (Long)attributes.get("customerId");

		if (customerId != null) {
			setCustomerId(customerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String customerName = (String)attributes.get("customerName");

		if (customerName != null) {
			setCustomerName(customerName);
		}

		String businessType = (String)attributes.get("businessType");

		if (businessType != null) {
			setBusinessType(businessType);
		}

		String addrLine1 = (String)attributes.get("addrLine1");

		if (addrLine1 != null) {
			setAddrLine1(addrLine1);
		}

		String addrLine2 = (String)attributes.get("addrLine2");

		if (addrLine2 != null) {
			setAddrLine2(addrLine2);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String websiteURL = (String)attributes.get("websiteURL");

		if (websiteURL != null) {
			setWebsiteURL(websiteURL);
		}

		String businessPhoneNumber = (String)attributes.get(
				"businessPhoneNumber");

		if (businessPhoneNumber != null) {
			setBusinessPhoneNumber(businessPhoneNumber);
		}

		String contactPersonName = (String)attributes.get("contactPersonName");

		if (contactPersonName != null) {
			setContactPersonName(contactPersonName);
		}

		String contactPersonNumber = (String)attributes.get(
				"contactPersonNumber");

		if (contactPersonNumber != null) {
			setContactPersonNumber(contactPersonNumber);
		}
	}

	@JSON
	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		_customerId = customerId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		_columnBitmask |= CUSTOMERNAME_COLUMN_BITMASK;

		if (_originalCustomerName == null) {
			_originalCustomerName = _customerName;
		}

		_customerName = customerName;
	}

	public String getOriginalCustomerName() {
		return GetterUtil.getString(_originalCustomerName);
	}

	@JSON
	@Override
	public String getBusinessType() {
		if (_businessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessType;
		}
	}

	@Override
	public void setBusinessType(String businessType) {
		_businessType = businessType;
	}

	@JSON
	@Override
	public String getAddrLine1() {
		if (_addrLine1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _addrLine1;
		}
	}

	@Override
	public void setAddrLine1(String addrLine1) {
		_addrLine1 = addrLine1;
	}

	@JSON
	@Override
	public String getAddrLine2() {
		if (_addrLine2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _addrLine2;
		}
	}

	@Override
	public void setAddrLine2(String addrLine2) {
		_addrLine2 = addrLine2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getWebsiteURL() {
		if (_websiteURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _websiteURL;
		}
	}

	@Override
	public void setWebsiteURL(String websiteURL) {
		_websiteURL = websiteURL;
	}

	@JSON
	@Override
	public String getBusinessPhoneNumber() {
		if (_businessPhoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessPhoneNumber;
		}
	}

	@Override
	public void setBusinessPhoneNumber(String businessPhoneNumber) {
		_businessPhoneNumber = businessPhoneNumber;
	}

	@JSON
	@Override
	public String getContactPersonName() {
		if (_contactPersonName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactPersonName;
		}
	}

	@Override
	public void setContactPersonName(String contactPersonName) {
		_columnBitmask |= CONTACTPERSONNAME_COLUMN_BITMASK;

		if (_originalContactPersonName == null) {
			_originalContactPersonName = _contactPersonName;
		}

		_contactPersonName = contactPersonName;
	}

	public String getOriginalContactPersonName() {
		return GetterUtil.getString(_originalContactPersonName);
	}

	@JSON
	@Override
	public String getContactPersonNumber() {
		if (_contactPersonNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactPersonNumber;
		}
	}

	@Override
	public void setContactPersonNumber(String contactPersonNumber) {
		_contactPersonNumber = contactPersonNumber;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdCustomer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdCustomer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdCustomer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdCustomerImpl adCustomerImpl = new AdCustomerImpl();

		adCustomerImpl.setCustomerId(getCustomerId());
		adCustomerImpl.setUserId(getUserId());
		adCustomerImpl.setCreatedDate(getCreatedDate());
		adCustomerImpl.setModifiedDate(getModifiedDate());
		adCustomerImpl.setCustomerName(getCustomerName());
		adCustomerImpl.setBusinessType(getBusinessType());
		adCustomerImpl.setAddrLine1(getAddrLine1());
		adCustomerImpl.setAddrLine2(getAddrLine2());
		adCustomerImpl.setCity(getCity());
		adCustomerImpl.setZipCode(getZipCode());
		adCustomerImpl.setStateId(getStateId());
		adCustomerImpl.setCountryId(getCountryId());
		adCustomerImpl.setEmail(getEmail());
		adCustomerImpl.setWebsiteURL(getWebsiteURL());
		adCustomerImpl.setBusinessPhoneNumber(getBusinessPhoneNumber());
		adCustomerImpl.setContactPersonName(getContactPersonName());
		adCustomerImpl.setContactPersonNumber(getContactPersonNumber());

		adCustomerImpl.resetOriginalValues();

		return adCustomerImpl;
	}

	@Override
	public int compareTo(AdCustomer adCustomer) {
		long primaryKey = adCustomer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdCustomer)) {
			return false;
		}

		AdCustomer adCustomer = (AdCustomer)obj;

		long primaryKey = adCustomer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdCustomerModelImpl adCustomerModelImpl = this;

		adCustomerModelImpl._originalCustomerName = adCustomerModelImpl._customerName;

		adCustomerModelImpl._originalContactPersonName = adCustomerModelImpl._contactPersonName;

		adCustomerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdCustomer> toCacheModel() {
		AdCustomerCacheModel adCustomerCacheModel = new AdCustomerCacheModel();

		adCustomerCacheModel.customerId = getCustomerId();

		adCustomerCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			adCustomerCacheModel.createdDate = createdDate.getTime();
		}
		else {
			adCustomerCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			adCustomerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			adCustomerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		adCustomerCacheModel.customerName = getCustomerName();

		String customerName = adCustomerCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			adCustomerCacheModel.customerName = null;
		}

		adCustomerCacheModel.businessType = getBusinessType();

		String businessType = adCustomerCacheModel.businessType;

		if ((businessType != null) && (businessType.length() == 0)) {
			adCustomerCacheModel.businessType = null;
		}

		adCustomerCacheModel.addrLine1 = getAddrLine1();

		String addrLine1 = adCustomerCacheModel.addrLine1;

		if ((addrLine1 != null) && (addrLine1.length() == 0)) {
			adCustomerCacheModel.addrLine1 = null;
		}

		adCustomerCacheModel.addrLine2 = getAddrLine2();

		String addrLine2 = adCustomerCacheModel.addrLine2;

		if ((addrLine2 != null) && (addrLine2.length() == 0)) {
			adCustomerCacheModel.addrLine2 = null;
		}

		adCustomerCacheModel.city = getCity();

		String city = adCustomerCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			adCustomerCacheModel.city = null;
		}

		adCustomerCacheModel.zipCode = getZipCode();

		String zipCode = adCustomerCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			adCustomerCacheModel.zipCode = null;
		}

		adCustomerCacheModel.stateId = getStateId();

		adCustomerCacheModel.countryId = getCountryId();

		adCustomerCacheModel.email = getEmail();

		String email = adCustomerCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			adCustomerCacheModel.email = null;
		}

		adCustomerCacheModel.websiteURL = getWebsiteURL();

		String websiteURL = adCustomerCacheModel.websiteURL;

		if ((websiteURL != null) && (websiteURL.length() == 0)) {
			adCustomerCacheModel.websiteURL = null;
		}

		adCustomerCacheModel.businessPhoneNumber = getBusinessPhoneNumber();

		String businessPhoneNumber = adCustomerCacheModel.businessPhoneNumber;

		if ((businessPhoneNumber != null) &&
				(businessPhoneNumber.length() == 0)) {
			adCustomerCacheModel.businessPhoneNumber = null;
		}

		adCustomerCacheModel.contactPersonName = getContactPersonName();

		String contactPersonName = adCustomerCacheModel.contactPersonName;

		if ((contactPersonName != null) && (contactPersonName.length() == 0)) {
			adCustomerCacheModel.contactPersonName = null;
		}

		adCustomerCacheModel.contactPersonNumber = getContactPersonNumber();

		String contactPersonNumber = adCustomerCacheModel.contactPersonNumber;

		if ((contactPersonNumber != null) &&
				(contactPersonNumber.length() == 0)) {
			adCustomerCacheModel.contactPersonNumber = null;
		}

		return adCustomerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{customerId=");
		sb.append(getCustomerId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", customerName=");
		sb.append(getCustomerName());
		sb.append(", businessType=");
		sb.append(getBusinessType());
		sb.append(", addrLine1=");
		sb.append(getAddrLine1());
		sb.append(", addrLine2=");
		sb.append(getAddrLine2());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", websiteURL=");
		sb.append(getWebsiteURL());
		sb.append(", businessPhoneNumber=");
		sb.append(getBusinessPhoneNumber());
		sb.append(", contactPersonName=");
		sb.append(getContactPersonName());
		sb.append(", contactPersonNumber=");
		sb.append(getContactPersonNumber());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.AdCustomer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>customerId</column-name><column-value><![CDATA[");
		sb.append(getCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerName</column-name><column-value><![CDATA[");
		sb.append(getCustomerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessType</column-name><column-value><![CDATA[");
		sb.append(getBusinessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addrLine1</column-name><column-value><![CDATA[");
		sb.append(getAddrLine1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addrLine2</column-name><column-value><![CDATA[");
		sb.append(getAddrLine2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>websiteURL</column-name><column-value><![CDATA[");
		sb.append(getWebsiteURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessPhoneNumber</column-name><column-value><![CDATA[");
		sb.append(getBusinessPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPersonName</column-name><column-value><![CDATA[");
		sb.append(getContactPersonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPersonNumber</column-name><column-value><![CDATA[");
		sb.append(getContactPersonNumber());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdCustomer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AdCustomer.class
		};
	private long _customerId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private String _customerName;
	private String _originalCustomerName;
	private String _businessType;
	private String _addrLine1;
	private String _addrLine2;
	private String _city;
	private String _zipCode;
	private long _stateId;
	private long _countryId;
	private String _email;
	private String _websiteURL;
	private String _businessPhoneNumber;
	private String _contactPersonName;
	private String _originalContactPersonName;
	private String _contactPersonNumber;
	private long _columnBitmask;
	private AdCustomer _escapedModel;
}