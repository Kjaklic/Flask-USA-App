/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.VenueImage;
import com.rumbasolutions.flask.model.VenueImageModel;
import com.rumbasolutions.flask.model.VenueImageSoap;
import com.rumbasolutions.flask.model.VenueImageVenueImageBlobModel;
import com.rumbasolutions.flask.service.VenueImageLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VenueImage service. Represents a row in the &quot;flaskevents_VenueImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.VenueImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VenueImageImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see VenueImageImpl
 * @see com.rumbasolutions.flask.model.VenueImage
 * @see com.rumbasolutions.flask.model.VenueImageModel
 * @generated
 */
@JSON(strict = true)
public class VenueImageModelImpl extends BaseModelImpl<VenueImage>
	implements VenueImageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a venue image model instance should use the {@link com.rumbasolutions.flask.model.VenueImage} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_VenueImage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "venueImageId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "venueImage", Types.BLOB },
			{ "venueId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_VenueImage (venueImageId LONG not null primary key,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,venueImage BLOB,venueId LONG)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_VenueImage";
	public static final String ORDER_BY_JPQL = " ORDER BY venueImage.title ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_VenueImage.title ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.VenueImage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.VenueImage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.VenueImage"),
			true);
	public static long VENUEID_COLUMN_BITMASK = 1L;
	public static long TITLE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VenueImage toModel(VenueImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VenueImage model = new VenueImageImpl();

		model.setVenueImageId(soapModel.getVenueImageId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setVenueImage(soapModel.getVenueImage());
		model.setVenueId(soapModel.getVenueId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VenueImage> toModels(VenueImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VenueImage> models = new ArrayList<VenueImage>(soapModels.length);

		for (VenueImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.VenueImage"));

	public VenueImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _venueImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVenueImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _venueImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VenueImage.class;
	}

	@Override
	public String getModelClassName() {
		return VenueImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("venueImageId", getVenueImageId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("venueImage", getVenueImage());
		attributes.put("venueId", getVenueId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long venueImageId = (Long)attributes.get("venueImageId");

		if (venueImageId != null) {
			setVenueImageId(venueImageId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Blob venueImage = (Blob)attributes.get("venueImage");

		if (venueImage != null) {
			setVenueImage(venueImage);
		}

		Long venueId = (Long)attributes.get("venueId");

		if (venueId != null) {
			setVenueId(venueId);
		}
	}

	@JSON
	@Override
	public long getVenueImageId() {
		return _venueImageId;
	}

	@Override
	public void setVenueImageId(long venueImageId) {
		_venueImageId = venueImageId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@JSON
	@Override
	public Blob getVenueImage() {
		if (_venueImageBlobModel == null) {
			try {
				_venueImageBlobModel = VenueImageLocalServiceUtil.getVenueImageBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_venueImageBlobModel != null) {
			blob = _venueImageBlobModel.getVenueImageBlob();
		}

		return blob;
	}

	@Override
	public void setVenueImage(Blob venueImage) {
		if (_venueImageBlobModel == null) {
			_venueImageBlobModel = new VenueImageVenueImageBlobModel(getPrimaryKey(),
					venueImage);
		}
		else {
			_venueImageBlobModel.setVenueImageBlob(venueImage);
		}
	}

	@JSON
	@Override
	public long getVenueId() {
		return _venueId;
	}

	@Override
	public void setVenueId(long venueId) {
		_columnBitmask |= VENUEID_COLUMN_BITMASK;

		if (!_setOriginalVenueId) {
			_setOriginalVenueId = true;

			_originalVenueId = _venueId;
		}

		_venueId = venueId;
	}

	public long getOriginalVenueId() {
		return _originalVenueId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VenueImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VenueImage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VenueImage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VenueImageImpl venueImageImpl = new VenueImageImpl();

		venueImageImpl.setVenueImageId(getVenueImageId());
		venueImageImpl.setCompanyId(getCompanyId());
		venueImageImpl.setUserId(getUserId());
		venueImageImpl.setCreatedDate(getCreatedDate());
		venueImageImpl.setModifiedDate(getModifiedDate());
		venueImageImpl.setTitle(getTitle());
		venueImageImpl.setVenueId(getVenueId());

		venueImageImpl.resetOriginalValues();

		return venueImageImpl;
	}

	@Override
	public int compareTo(VenueImage venueImage) {
		int value = 0;

		value = getTitle().compareTo(venueImage.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VenueImage)) {
			return false;
		}

		VenueImage venueImage = (VenueImage)obj;

		long primaryKey = venueImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VenueImageModelImpl venueImageModelImpl = this;

		venueImageModelImpl._venueImageBlobModel = null;

		venueImageModelImpl._originalVenueId = venueImageModelImpl._venueId;

		venueImageModelImpl._setOriginalVenueId = false;

		venueImageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VenueImage> toCacheModel() {
		VenueImageCacheModel venueImageCacheModel = new VenueImageCacheModel();

		venueImageCacheModel.venueImageId = getVenueImageId();

		venueImageCacheModel.companyId = getCompanyId();

		venueImageCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			venueImageCacheModel.createdDate = createdDate.getTime();
		}
		else {
			venueImageCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			venueImageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			venueImageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		venueImageCacheModel.title = getTitle();

		String title = venueImageCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			venueImageCacheModel.title = null;
		}

		venueImageCacheModel.venueId = getVenueId();

		return venueImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{venueImageId=");
		sb.append(getVenueImageId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", venueId=");
		sb.append(getVenueId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.VenueImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>venueImageId</column-name><column-value><![CDATA[");
		sb.append(getVenueImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueId</column-name><column-value><![CDATA[");
		sb.append(getVenueId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VenueImage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VenueImage.class
		};
	private long _venueImageId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private String _title;
	private VenueImageVenueImageBlobModel _venueImageBlobModel;
	private long _venueId;
	private long _originalVenueId;
	private boolean _setOriginalVenueId;
	private long _columnBitmask;
	private VenueImage _escapedModel;
}