/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.EventDetail;
import com.rumbasolutions.flask.model.EventDetailModel;
import com.rumbasolutions.flask.model.EventDetailSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventDetail service. Represents a row in the &quot;flaskevents_EventDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.EventDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventDetailImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see EventDetailImpl
 * @see com.rumbasolutions.flask.model.EventDetail
 * @see com.rumbasolutions.flask.model.EventDetailModel
 * @generated
 */
@JSON(strict = true)
public class EventDetailModelImpl extends BaseModelImpl<EventDetail>
	implements EventDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event detail model instance should use the {@link com.rumbasolutions.flask.model.EventDetail} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_EventDetail";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventDetailId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "eventId", Types.BIGINT },
			{ "infoTypeId", Types.BIGINT },
			{ "infoTypeCategoryId", Types.BIGINT },
			{ "eventDetailInfoName", Types.VARCHAR },
			{ "eventDetailInfoDesc", Types.VARCHAR },
			{ "eventDetailInfoComment", Types.VARCHAR },
			{ "eventDetailAddressLine1", Types.VARCHAR },
			{ "eventDetailAddressLine2", Types.VARCHAR },
			{ "eventDetailInfocity", Types.VARCHAR },
			{ "eventDetailZip", Types.VARCHAR },
			{ "eventDetailState", Types.VARCHAR },
			{ "eventDetailCountry", Types.VARCHAR },
			{ "eventDetailLatitude", Types.VARCHAR },
			{ "eventDetailLongitude", Types.VARCHAR },
			{ "eventDetailPhone", Types.VARCHAR },
			{ "eventDetailWebsite", Types.VARCHAR },
			{ "eventDetailCost", Types.DOUBLE },
			{ "hoursOfOperation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_EventDetail (eventDetailId LONG not null primary key,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,eventId LONG,infoTypeId LONG,infoTypeCategoryId LONG,eventDetailInfoName VARCHAR(75) null,eventDetailInfoDesc VARCHAR(75) null,eventDetailInfoComment VARCHAR(75) null,eventDetailAddressLine1 VARCHAR(75) null,eventDetailAddressLine2 VARCHAR(75) null,eventDetailInfocity VARCHAR(75) null,eventDetailZip VARCHAR(75) null,eventDetailState VARCHAR(75) null,eventDetailCountry VARCHAR(75) null,eventDetailLatitude VARCHAR(75) null,eventDetailLongitude VARCHAR(75) null,eventDetailPhone VARCHAR(75) null,eventDetailWebsite VARCHAR(75) null,eventDetailCost DOUBLE,hoursOfOperation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_EventDetail";
	public static final String ORDER_BY_JPQL = " ORDER BY eventDetail.eventDetailId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_EventDetail.eventDetailId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.EventDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.EventDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.EventDetail"),
			true);
	public static long EVENTID_COLUMN_BITMASK = 1L;
	public static long EVENTDETAILID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventDetail toModel(EventDetailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventDetail model = new EventDetailImpl();

		model.setEventDetailId(soapModel.getEventDetailId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEventId(soapModel.getEventId());
		model.setInfoTypeId(soapModel.getInfoTypeId());
		model.setInfoTypeCategoryId(soapModel.getInfoTypeCategoryId());
		model.setEventDetailInfoName(soapModel.getEventDetailInfoName());
		model.setEventDetailInfoDesc(soapModel.getEventDetailInfoDesc());
		model.setEventDetailInfoComment(soapModel.getEventDetailInfoComment());
		model.setEventDetailAddressLine1(soapModel.getEventDetailAddressLine1());
		model.setEventDetailAddressLine2(soapModel.getEventDetailAddressLine2());
		model.setEventDetailInfocity(soapModel.getEventDetailInfocity());
		model.setEventDetailZip(soapModel.getEventDetailZip());
		model.setEventDetailState(soapModel.getEventDetailState());
		model.setEventDetailCountry(soapModel.getEventDetailCountry());
		model.setEventDetailLatitude(soapModel.getEventDetailLatitude());
		model.setEventDetailLongitude(soapModel.getEventDetailLongitude());
		model.setEventDetailPhone(soapModel.getEventDetailPhone());
		model.setEventDetailWebsite(soapModel.getEventDetailWebsite());
		model.setEventDetailCost(soapModel.getEventDetailCost());
		model.setHoursOfOperation(soapModel.getHoursOfOperation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventDetail> toModels(EventDetailSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventDetail> models = new ArrayList<EventDetail>(soapModels.length);

		for (EventDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.EventDetail"));

	public EventDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventDetail.class;
	}

	@Override
	public String getModelClassName() {
		return EventDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventDetailId", getEventDetailId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("eventId", getEventId());
		attributes.put("infoTypeId", getInfoTypeId());
		attributes.put("infoTypeCategoryId", getInfoTypeCategoryId());
		attributes.put("eventDetailInfoName", getEventDetailInfoName());
		attributes.put("eventDetailInfoDesc", getEventDetailInfoDesc());
		attributes.put("eventDetailInfoComment", getEventDetailInfoComment());
		attributes.put("eventDetailAddressLine1", getEventDetailAddressLine1());
		attributes.put("eventDetailAddressLine2", getEventDetailAddressLine2());
		attributes.put("eventDetailInfocity", getEventDetailInfocity());
		attributes.put("eventDetailZip", getEventDetailZip());
		attributes.put("eventDetailState", getEventDetailState());
		attributes.put("eventDetailCountry", getEventDetailCountry());
		attributes.put("eventDetailLatitude", getEventDetailLatitude());
		attributes.put("eventDetailLongitude", getEventDetailLongitude());
		attributes.put("eventDetailPhone", getEventDetailPhone());
		attributes.put("eventDetailWebsite", getEventDetailWebsite());
		attributes.put("eventDetailCost", getEventDetailCost());
		attributes.put("hoursOfOperation", getHoursOfOperation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventDetailId = (Long)attributes.get("eventDetailId");

		if (eventDetailId != null) {
			setEventDetailId(eventDetailId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long infoTypeId = (Long)attributes.get("infoTypeId");

		if (infoTypeId != null) {
			setInfoTypeId(infoTypeId);
		}

		Long infoTypeCategoryId = (Long)attributes.get("infoTypeCategoryId");

		if (infoTypeCategoryId != null) {
			setInfoTypeCategoryId(infoTypeCategoryId);
		}

		String eventDetailInfoName = (String)attributes.get(
				"eventDetailInfoName");

		if (eventDetailInfoName != null) {
			setEventDetailInfoName(eventDetailInfoName);
		}

		String eventDetailInfoDesc = (String)attributes.get(
				"eventDetailInfoDesc");

		if (eventDetailInfoDesc != null) {
			setEventDetailInfoDesc(eventDetailInfoDesc);
		}

		String eventDetailInfoComment = (String)attributes.get(
				"eventDetailInfoComment");

		if (eventDetailInfoComment != null) {
			setEventDetailInfoComment(eventDetailInfoComment);
		}

		String eventDetailAddressLine1 = (String)attributes.get(
				"eventDetailAddressLine1");

		if (eventDetailAddressLine1 != null) {
			setEventDetailAddressLine1(eventDetailAddressLine1);
		}

		String eventDetailAddressLine2 = (String)attributes.get(
				"eventDetailAddressLine2");

		if (eventDetailAddressLine2 != null) {
			setEventDetailAddressLine2(eventDetailAddressLine2);
		}

		String eventDetailInfocity = (String)attributes.get(
				"eventDetailInfocity");

		if (eventDetailInfocity != null) {
			setEventDetailInfocity(eventDetailInfocity);
		}

		String eventDetailZip = (String)attributes.get("eventDetailZip");

		if (eventDetailZip != null) {
			setEventDetailZip(eventDetailZip);
		}

		String eventDetailState = (String)attributes.get("eventDetailState");

		if (eventDetailState != null) {
			setEventDetailState(eventDetailState);
		}

		String eventDetailCountry = (String)attributes.get("eventDetailCountry");

		if (eventDetailCountry != null) {
			setEventDetailCountry(eventDetailCountry);
		}

		String eventDetailLatitude = (String)attributes.get(
				"eventDetailLatitude");

		if (eventDetailLatitude != null) {
			setEventDetailLatitude(eventDetailLatitude);
		}

		String eventDetailLongitude = (String)attributes.get(
				"eventDetailLongitude");

		if (eventDetailLongitude != null) {
			setEventDetailLongitude(eventDetailLongitude);
		}

		String eventDetailPhone = (String)attributes.get("eventDetailPhone");

		if (eventDetailPhone != null) {
			setEventDetailPhone(eventDetailPhone);
		}

		String eventDetailWebsite = (String)attributes.get("eventDetailWebsite");

		if (eventDetailWebsite != null) {
			setEventDetailWebsite(eventDetailWebsite);
		}

		Double eventDetailCost = (Double)attributes.get("eventDetailCost");

		if (eventDetailCost != null) {
			setEventDetailCost(eventDetailCost);
		}

		String hoursOfOperation = (String)attributes.get("hoursOfOperation");

		if (hoursOfOperation != null) {
			setHoursOfOperation(hoursOfOperation);
		}
	}

	@JSON
	@Override
	public long getEventDetailId() {
		return _eventDetailId;
	}

	@Override
	public void setEventDetailId(long eventDetailId) {
		_eventDetailId = eventDetailId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@JSON
	@Override
	public long getInfoTypeId() {
		return _infoTypeId;
	}

	@Override
	public void setInfoTypeId(long infoTypeId) {
		_infoTypeId = infoTypeId;
	}

	@JSON
	@Override
	public long getInfoTypeCategoryId() {
		return _infoTypeCategoryId;
	}

	@Override
	public void setInfoTypeCategoryId(long infoTypeCategoryId) {
		_infoTypeCategoryId = infoTypeCategoryId;
	}

	@JSON
	@Override
	public String getEventDetailInfoName() {
		if (_eventDetailInfoName == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailInfoName;
		}
	}

	@Override
	public void setEventDetailInfoName(String eventDetailInfoName) {
		_eventDetailInfoName = eventDetailInfoName;
	}

	@JSON
	@Override
	public String getEventDetailInfoDesc() {
		if (_eventDetailInfoDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailInfoDesc;
		}
	}

	@Override
	public void setEventDetailInfoDesc(String eventDetailInfoDesc) {
		_eventDetailInfoDesc = eventDetailInfoDesc;
	}

	@JSON
	@Override
	public String getEventDetailInfoComment() {
		if (_eventDetailInfoComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailInfoComment;
		}
	}

	@Override
	public void setEventDetailInfoComment(String eventDetailInfoComment) {
		_eventDetailInfoComment = eventDetailInfoComment;
	}

	@JSON
	@Override
	public String getEventDetailAddressLine1() {
		if (_eventDetailAddressLine1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailAddressLine1;
		}
	}

	@Override
	public void setEventDetailAddressLine1(String eventDetailAddressLine1) {
		_eventDetailAddressLine1 = eventDetailAddressLine1;
	}

	@JSON
	@Override
	public String getEventDetailAddressLine2() {
		if (_eventDetailAddressLine2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailAddressLine2;
		}
	}

	@Override
	public void setEventDetailAddressLine2(String eventDetailAddressLine2) {
		_eventDetailAddressLine2 = eventDetailAddressLine2;
	}

	@JSON
	@Override
	public String getEventDetailInfocity() {
		if (_eventDetailInfocity == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailInfocity;
		}
	}

	@Override
	public void setEventDetailInfocity(String eventDetailInfocity) {
		_eventDetailInfocity = eventDetailInfocity;
	}

	@JSON
	@Override
	public String getEventDetailZip() {
		if (_eventDetailZip == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailZip;
		}
	}

	@Override
	public void setEventDetailZip(String eventDetailZip) {
		_eventDetailZip = eventDetailZip;
	}

	@JSON
	@Override
	public String getEventDetailState() {
		if (_eventDetailState == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailState;
		}
	}

	@Override
	public void setEventDetailState(String eventDetailState) {
		_eventDetailState = eventDetailState;
	}

	@JSON
	@Override
	public String getEventDetailCountry() {
		if (_eventDetailCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailCountry;
		}
	}

	@Override
	public void setEventDetailCountry(String eventDetailCountry) {
		_eventDetailCountry = eventDetailCountry;
	}

	@JSON
	@Override
	public String getEventDetailLatitude() {
		if (_eventDetailLatitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailLatitude;
		}
	}

	@Override
	public void setEventDetailLatitude(String eventDetailLatitude) {
		_eventDetailLatitude = eventDetailLatitude;
	}

	@JSON
	@Override
	public String getEventDetailLongitude() {
		if (_eventDetailLongitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailLongitude;
		}
	}

	@Override
	public void setEventDetailLongitude(String eventDetailLongitude) {
		_eventDetailLongitude = eventDetailLongitude;
	}

	@JSON
	@Override
	public String getEventDetailPhone() {
		if (_eventDetailPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailPhone;
		}
	}

	@Override
	public void setEventDetailPhone(String eventDetailPhone) {
		_eventDetailPhone = eventDetailPhone;
	}

	@JSON
	@Override
	public String getEventDetailWebsite() {
		if (_eventDetailWebsite == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventDetailWebsite;
		}
	}

	@Override
	public void setEventDetailWebsite(String eventDetailWebsite) {
		_eventDetailWebsite = eventDetailWebsite;
	}

	@JSON
	@Override
	public double getEventDetailCost() {
		return _eventDetailCost;
	}

	@Override
	public void setEventDetailCost(double eventDetailCost) {
		_eventDetailCost = eventDetailCost;
	}

	@JSON
	@Override
	public String getHoursOfOperation() {
		if (_hoursOfOperation == null) {
			return StringPool.BLANK;
		}
		else {
			return _hoursOfOperation;
		}
	}

	@Override
	public void setHoursOfOperation(String hoursOfOperation) {
		_hoursOfOperation = hoursOfOperation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EventDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EventDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventDetailImpl eventDetailImpl = new EventDetailImpl();

		eventDetailImpl.setEventDetailId(getEventDetailId());
		eventDetailImpl.setCompanyId(getCompanyId());
		eventDetailImpl.setUserId(getUserId());
		eventDetailImpl.setCreatedDate(getCreatedDate());
		eventDetailImpl.setModifiedDate(getModifiedDate());
		eventDetailImpl.setEventId(getEventId());
		eventDetailImpl.setInfoTypeId(getInfoTypeId());
		eventDetailImpl.setInfoTypeCategoryId(getInfoTypeCategoryId());
		eventDetailImpl.setEventDetailInfoName(getEventDetailInfoName());
		eventDetailImpl.setEventDetailInfoDesc(getEventDetailInfoDesc());
		eventDetailImpl.setEventDetailInfoComment(getEventDetailInfoComment());
		eventDetailImpl.setEventDetailAddressLine1(getEventDetailAddressLine1());
		eventDetailImpl.setEventDetailAddressLine2(getEventDetailAddressLine2());
		eventDetailImpl.setEventDetailInfocity(getEventDetailInfocity());
		eventDetailImpl.setEventDetailZip(getEventDetailZip());
		eventDetailImpl.setEventDetailState(getEventDetailState());
		eventDetailImpl.setEventDetailCountry(getEventDetailCountry());
		eventDetailImpl.setEventDetailLatitude(getEventDetailLatitude());
		eventDetailImpl.setEventDetailLongitude(getEventDetailLongitude());
		eventDetailImpl.setEventDetailPhone(getEventDetailPhone());
		eventDetailImpl.setEventDetailWebsite(getEventDetailWebsite());
		eventDetailImpl.setEventDetailCost(getEventDetailCost());
		eventDetailImpl.setHoursOfOperation(getHoursOfOperation());

		eventDetailImpl.resetOriginalValues();

		return eventDetailImpl;
	}

	@Override
	public int compareTo(EventDetail eventDetail) {
		long primaryKey = eventDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventDetail)) {
			return false;
		}

		EventDetail eventDetail = (EventDetail)obj;

		long primaryKey = eventDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventDetailModelImpl eventDetailModelImpl = this;

		eventDetailModelImpl._originalEventId = eventDetailModelImpl._eventId;

		eventDetailModelImpl._setOriginalEventId = false;

		eventDetailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventDetail> toCacheModel() {
		EventDetailCacheModel eventDetailCacheModel = new EventDetailCacheModel();

		eventDetailCacheModel.eventDetailId = getEventDetailId();

		eventDetailCacheModel.companyId = getCompanyId();

		eventDetailCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			eventDetailCacheModel.createdDate = createdDate.getTime();
		}
		else {
			eventDetailCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventDetailCacheModel.eventId = getEventId();

		eventDetailCacheModel.infoTypeId = getInfoTypeId();

		eventDetailCacheModel.infoTypeCategoryId = getInfoTypeCategoryId();

		eventDetailCacheModel.eventDetailInfoName = getEventDetailInfoName();

		String eventDetailInfoName = eventDetailCacheModel.eventDetailInfoName;

		if ((eventDetailInfoName != null) &&
				(eventDetailInfoName.length() == 0)) {
			eventDetailCacheModel.eventDetailInfoName = null;
		}

		eventDetailCacheModel.eventDetailInfoDesc = getEventDetailInfoDesc();

		String eventDetailInfoDesc = eventDetailCacheModel.eventDetailInfoDesc;

		if ((eventDetailInfoDesc != null) &&
				(eventDetailInfoDesc.length() == 0)) {
			eventDetailCacheModel.eventDetailInfoDesc = null;
		}

		eventDetailCacheModel.eventDetailInfoComment = getEventDetailInfoComment();

		String eventDetailInfoComment = eventDetailCacheModel.eventDetailInfoComment;

		if ((eventDetailInfoComment != null) &&
				(eventDetailInfoComment.length() == 0)) {
			eventDetailCacheModel.eventDetailInfoComment = null;
		}

		eventDetailCacheModel.eventDetailAddressLine1 = getEventDetailAddressLine1();

		String eventDetailAddressLine1 = eventDetailCacheModel.eventDetailAddressLine1;

		if ((eventDetailAddressLine1 != null) &&
				(eventDetailAddressLine1.length() == 0)) {
			eventDetailCacheModel.eventDetailAddressLine1 = null;
		}

		eventDetailCacheModel.eventDetailAddressLine2 = getEventDetailAddressLine2();

		String eventDetailAddressLine2 = eventDetailCacheModel.eventDetailAddressLine2;

		if ((eventDetailAddressLine2 != null) &&
				(eventDetailAddressLine2.length() == 0)) {
			eventDetailCacheModel.eventDetailAddressLine2 = null;
		}

		eventDetailCacheModel.eventDetailInfocity = getEventDetailInfocity();

		String eventDetailInfocity = eventDetailCacheModel.eventDetailInfocity;

		if ((eventDetailInfocity != null) &&
				(eventDetailInfocity.length() == 0)) {
			eventDetailCacheModel.eventDetailInfocity = null;
		}

		eventDetailCacheModel.eventDetailZip = getEventDetailZip();

		String eventDetailZip = eventDetailCacheModel.eventDetailZip;

		if ((eventDetailZip != null) && (eventDetailZip.length() == 0)) {
			eventDetailCacheModel.eventDetailZip = null;
		}

		eventDetailCacheModel.eventDetailState = getEventDetailState();

		String eventDetailState = eventDetailCacheModel.eventDetailState;

		if ((eventDetailState != null) && (eventDetailState.length() == 0)) {
			eventDetailCacheModel.eventDetailState = null;
		}

		eventDetailCacheModel.eventDetailCountry = getEventDetailCountry();

		String eventDetailCountry = eventDetailCacheModel.eventDetailCountry;

		if ((eventDetailCountry != null) && (eventDetailCountry.length() == 0)) {
			eventDetailCacheModel.eventDetailCountry = null;
		}

		eventDetailCacheModel.eventDetailLatitude = getEventDetailLatitude();

		String eventDetailLatitude = eventDetailCacheModel.eventDetailLatitude;

		if ((eventDetailLatitude != null) &&
				(eventDetailLatitude.length() == 0)) {
			eventDetailCacheModel.eventDetailLatitude = null;
		}

		eventDetailCacheModel.eventDetailLongitude = getEventDetailLongitude();

		String eventDetailLongitude = eventDetailCacheModel.eventDetailLongitude;

		if ((eventDetailLongitude != null) &&
				(eventDetailLongitude.length() == 0)) {
			eventDetailCacheModel.eventDetailLongitude = null;
		}

		eventDetailCacheModel.eventDetailPhone = getEventDetailPhone();

		String eventDetailPhone = eventDetailCacheModel.eventDetailPhone;

		if ((eventDetailPhone != null) && (eventDetailPhone.length() == 0)) {
			eventDetailCacheModel.eventDetailPhone = null;
		}

		eventDetailCacheModel.eventDetailWebsite = getEventDetailWebsite();

		String eventDetailWebsite = eventDetailCacheModel.eventDetailWebsite;

		if ((eventDetailWebsite != null) && (eventDetailWebsite.length() == 0)) {
			eventDetailCacheModel.eventDetailWebsite = null;
		}

		eventDetailCacheModel.eventDetailCost = getEventDetailCost();

		eventDetailCacheModel.hoursOfOperation = getHoursOfOperation();

		String hoursOfOperation = eventDetailCacheModel.hoursOfOperation;

		if ((hoursOfOperation != null) && (hoursOfOperation.length() == 0)) {
			eventDetailCacheModel.hoursOfOperation = null;
		}

		return eventDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{eventDetailId=");
		sb.append(getEventDetailId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", infoTypeId=");
		sb.append(getInfoTypeId());
		sb.append(", infoTypeCategoryId=");
		sb.append(getInfoTypeCategoryId());
		sb.append(", eventDetailInfoName=");
		sb.append(getEventDetailInfoName());
		sb.append(", eventDetailInfoDesc=");
		sb.append(getEventDetailInfoDesc());
		sb.append(", eventDetailInfoComment=");
		sb.append(getEventDetailInfoComment());
		sb.append(", eventDetailAddressLine1=");
		sb.append(getEventDetailAddressLine1());
		sb.append(", eventDetailAddressLine2=");
		sb.append(getEventDetailAddressLine2());
		sb.append(", eventDetailInfocity=");
		sb.append(getEventDetailInfocity());
		sb.append(", eventDetailZip=");
		sb.append(getEventDetailZip());
		sb.append(", eventDetailState=");
		sb.append(getEventDetailState());
		sb.append(", eventDetailCountry=");
		sb.append(getEventDetailCountry());
		sb.append(", eventDetailLatitude=");
		sb.append(getEventDetailLatitude());
		sb.append(", eventDetailLongitude=");
		sb.append(getEventDetailLongitude());
		sb.append(", eventDetailPhone=");
		sb.append(getEventDetailPhone());
		sb.append(", eventDetailWebsite=");
		sb.append(getEventDetailWebsite());
		sb.append(", eventDetailCost=");
		sb.append(getEventDetailCost());
		sb.append(", hoursOfOperation=");
		sb.append(getHoursOfOperation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.EventDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventDetailId</column-name><column-value><![CDATA[");
		sb.append(getEventDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeCategoryId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailInfoName</column-name><column-value><![CDATA[");
		sb.append(getEventDetailInfoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailInfoDesc</column-name><column-value><![CDATA[");
		sb.append(getEventDetailInfoDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailInfoComment</column-name><column-value><![CDATA[");
		sb.append(getEventDetailInfoComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailAddressLine1</column-name><column-value><![CDATA[");
		sb.append(getEventDetailAddressLine1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailAddressLine2</column-name><column-value><![CDATA[");
		sb.append(getEventDetailAddressLine2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailInfocity</column-name><column-value><![CDATA[");
		sb.append(getEventDetailInfocity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailZip</column-name><column-value><![CDATA[");
		sb.append(getEventDetailZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailState</column-name><column-value><![CDATA[");
		sb.append(getEventDetailState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailCountry</column-name><column-value><![CDATA[");
		sb.append(getEventDetailCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailLatitude</column-name><column-value><![CDATA[");
		sb.append(getEventDetailLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailLongitude</column-name><column-value><![CDATA[");
		sb.append(getEventDetailLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailPhone</column-name><column-value><![CDATA[");
		sb.append(getEventDetailPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailWebsite</column-name><column-value><![CDATA[");
		sb.append(getEventDetailWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailCost</column-name><column-value><![CDATA[");
		sb.append(getEventDetailCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoursOfOperation</column-name><column-value><![CDATA[");
		sb.append(getHoursOfOperation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventDetail.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EventDetail.class
		};
	private long _eventDetailId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private long _infoTypeId;
	private long _infoTypeCategoryId;
	private String _eventDetailInfoName;
	private String _eventDetailInfoDesc;
	private String _eventDetailInfoComment;
	private String _eventDetailAddressLine1;
	private String _eventDetailAddressLine2;
	private String _eventDetailInfocity;
	private String _eventDetailZip;
	private String _eventDetailState;
	private String _eventDetailCountry;
	private String _eventDetailLatitude;
	private String _eventDetailLongitude;
	private String _eventDetailPhone;
	private String _eventDetailWebsite;
	private double _eventDetailCost;
	private String _hoursOfOperation;
	private long _columnBitmask;
	private EventDetail _escapedModel;
}