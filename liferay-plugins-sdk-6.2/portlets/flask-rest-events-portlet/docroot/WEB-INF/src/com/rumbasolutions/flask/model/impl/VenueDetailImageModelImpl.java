/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.VenueDetailImage;
import com.rumbasolutions.flask.model.VenueDetailImageModel;
import com.rumbasolutions.flask.model.VenueDetailImageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VenueDetailImage service. Represents a row in the &quot;flaskevents_VenueDetailImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.VenueDetailImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VenueDetailImageImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see VenueDetailImageImpl
 * @see com.rumbasolutions.flask.model.VenueDetailImage
 * @see com.rumbasolutions.flask.model.VenueDetailImageModel
 * @generated
 */
@JSON(strict = true)
public class VenueDetailImageModelImpl extends BaseModelImpl<VenueDetailImage>
	implements VenueDetailImageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a venue detail image model instance should use the {@link com.rumbasolutions.flask.model.VenueDetailImage} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_VenueDetailImage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "venueDetailImageId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "venueDetailId", Types.BIGINT },
			{ "imageTitle", Types.VARCHAR },
			{ "imageDesc", Types.VARCHAR },
			{ "imageUUID", Types.VARCHAR },
			{ "imageGroupId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_VenueDetailImage (venueDetailImageId LONG not null primary key,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,venueDetailId LONG,imageTitle VARCHAR(75) null,imageDesc VARCHAR(75) null,imageUUID VARCHAR(75) null,imageGroupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_VenueDetailImage";
	public static final String ORDER_BY_JPQL = " ORDER BY venueDetailImage.venueDetailImageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_VenueDetailImage.venueDetailImageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.VenueDetailImage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.VenueDetailImage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.VenueDetailImage"),
			true);
	public static long VENUEDETAILID_COLUMN_BITMASK = 1L;
	public static long VENUEDETAILIMAGEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VenueDetailImage toModel(VenueDetailImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VenueDetailImage model = new VenueDetailImageImpl();

		model.setVenueDetailImageId(soapModel.getVenueDetailImageId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setVenueDetailId(soapModel.getVenueDetailId());
		model.setImageTitle(soapModel.getImageTitle());
		model.setImageDesc(soapModel.getImageDesc());
		model.setImageUUID(soapModel.getImageUUID());
		model.setImageGroupId(soapModel.getImageGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VenueDetailImage> toModels(
		VenueDetailImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VenueDetailImage> models = new ArrayList<VenueDetailImage>(soapModels.length);

		for (VenueDetailImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.VenueDetailImage"));

	public VenueDetailImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _venueDetailImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVenueDetailImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _venueDetailImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VenueDetailImage.class;
	}

	@Override
	public String getModelClassName() {
		return VenueDetailImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("venueDetailImageId", getVenueDetailImageId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("venueDetailId", getVenueDetailId());
		attributes.put("imageTitle", getImageTitle());
		attributes.put("imageDesc", getImageDesc());
		attributes.put("imageUUID", getImageUUID());
		attributes.put("imageGroupId", getImageGroupId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long venueDetailImageId = (Long)attributes.get("venueDetailImageId");

		if (venueDetailImageId != null) {
			setVenueDetailImageId(venueDetailImageId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long venueDetailId = (Long)attributes.get("venueDetailId");

		if (venueDetailId != null) {
			setVenueDetailId(venueDetailId);
		}

		String imageTitle = (String)attributes.get("imageTitle");

		if (imageTitle != null) {
			setImageTitle(imageTitle);
		}

		String imageDesc = (String)attributes.get("imageDesc");

		if (imageDesc != null) {
			setImageDesc(imageDesc);
		}

		String imageUUID = (String)attributes.get("imageUUID");

		if (imageUUID != null) {
			setImageUUID(imageUUID);
		}

		Long imageGroupId = (Long)attributes.get("imageGroupId");

		if (imageGroupId != null) {
			setImageGroupId(imageGroupId);
		}
	}

	@JSON
	@Override
	public long getVenueDetailImageId() {
		return _venueDetailImageId;
	}

	@Override
	public void setVenueDetailImageId(long venueDetailImageId) {
		_venueDetailImageId = venueDetailImageId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getVenueDetailId() {
		return _venueDetailId;
	}

	@Override
	public void setVenueDetailId(long venueDetailId) {
		_columnBitmask |= VENUEDETAILID_COLUMN_BITMASK;

		if (!_setOriginalVenueDetailId) {
			_setOriginalVenueDetailId = true;

			_originalVenueDetailId = _venueDetailId;
		}

		_venueDetailId = venueDetailId;
	}

	public long getOriginalVenueDetailId() {
		return _originalVenueDetailId;
	}

	@JSON
	@Override
	public String getImageTitle() {
		if (_imageTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageTitle;
		}
	}

	@Override
	public void setImageTitle(String imageTitle) {
		_imageTitle = imageTitle;
	}

	@JSON
	@Override
	public String getImageDesc() {
		if (_imageDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageDesc;
		}
	}

	@Override
	public void setImageDesc(String imageDesc) {
		_imageDesc = imageDesc;
	}

	@JSON
	@Override
	public String getImageUUID() {
		if (_imageUUID == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUUID;
		}
	}

	@Override
	public void setImageUUID(String imageUUID) {
		_imageUUID = imageUUID;
	}

	@JSON
	@Override
	public long getImageGroupId() {
		return _imageGroupId;
	}

	@Override
	public void setImageGroupId(long imageGroupId) {
		_imageGroupId = imageGroupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VenueDetailImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VenueDetailImage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VenueDetailImage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VenueDetailImageImpl venueDetailImageImpl = new VenueDetailImageImpl();

		venueDetailImageImpl.setVenueDetailImageId(getVenueDetailImageId());
		venueDetailImageImpl.setCompanyId(getCompanyId());
		venueDetailImageImpl.setUserId(getUserId());
		venueDetailImageImpl.setCreatedDate(getCreatedDate());
		venueDetailImageImpl.setModifiedDate(getModifiedDate());
		venueDetailImageImpl.setVenueDetailId(getVenueDetailId());
		venueDetailImageImpl.setImageTitle(getImageTitle());
		venueDetailImageImpl.setImageDesc(getImageDesc());
		venueDetailImageImpl.setImageUUID(getImageUUID());
		venueDetailImageImpl.setImageGroupId(getImageGroupId());

		venueDetailImageImpl.resetOriginalValues();

		return venueDetailImageImpl;
	}

	@Override
	public int compareTo(VenueDetailImage venueDetailImage) {
		long primaryKey = venueDetailImage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VenueDetailImage)) {
			return false;
		}

		VenueDetailImage venueDetailImage = (VenueDetailImage)obj;

		long primaryKey = venueDetailImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VenueDetailImageModelImpl venueDetailImageModelImpl = this;

		venueDetailImageModelImpl._originalVenueDetailId = venueDetailImageModelImpl._venueDetailId;

		venueDetailImageModelImpl._setOriginalVenueDetailId = false;

		venueDetailImageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VenueDetailImage> toCacheModel() {
		VenueDetailImageCacheModel venueDetailImageCacheModel = new VenueDetailImageCacheModel();

		venueDetailImageCacheModel.venueDetailImageId = getVenueDetailImageId();

		venueDetailImageCacheModel.companyId = getCompanyId();

		venueDetailImageCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			venueDetailImageCacheModel.createdDate = createdDate.getTime();
		}
		else {
			venueDetailImageCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			venueDetailImageCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			venueDetailImageCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		venueDetailImageCacheModel.venueDetailId = getVenueDetailId();

		venueDetailImageCacheModel.imageTitle = getImageTitle();

		String imageTitle = venueDetailImageCacheModel.imageTitle;

		if ((imageTitle != null) && (imageTitle.length() == 0)) {
			venueDetailImageCacheModel.imageTitle = null;
		}

		venueDetailImageCacheModel.imageDesc = getImageDesc();

		String imageDesc = venueDetailImageCacheModel.imageDesc;

		if ((imageDesc != null) && (imageDesc.length() == 0)) {
			venueDetailImageCacheModel.imageDesc = null;
		}

		venueDetailImageCacheModel.imageUUID = getImageUUID();

		String imageUUID = venueDetailImageCacheModel.imageUUID;

		if ((imageUUID != null) && (imageUUID.length() == 0)) {
			venueDetailImageCacheModel.imageUUID = null;
		}

		venueDetailImageCacheModel.imageGroupId = getImageGroupId();

		return venueDetailImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{venueDetailImageId=");
		sb.append(getVenueDetailImageId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", venueDetailId=");
		sb.append(getVenueDetailId());
		sb.append(", imageTitle=");
		sb.append(getImageTitle());
		sb.append(", imageDesc=");
		sb.append(getImageDesc());
		sb.append(", imageUUID=");
		sb.append(getImageUUID());
		sb.append(", imageGroupId=");
		sb.append(getImageGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.VenueDetailImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>venueDetailImageId</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailId</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageTitle</column-name><column-value><![CDATA[");
		sb.append(getImageTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageDesc</column-name><column-value><![CDATA[");
		sb.append(getImageDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUUID</column-name><column-value><![CDATA[");
		sb.append(getImageUUID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageGroupId</column-name><column-value><![CDATA[");
		sb.append(getImageGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VenueDetailImage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VenueDetailImage.class
		};
	private long _venueDetailImageId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _venueDetailId;
	private long _originalVenueDetailId;
	private boolean _setOriginalVenueDetailId;
	private String _imageTitle;
	private String _imageDesc;
	private String _imageUUID;
	private long _imageGroupId;
	private long _columnBitmask;
	private VenueDetailImage _escapedModel;
}