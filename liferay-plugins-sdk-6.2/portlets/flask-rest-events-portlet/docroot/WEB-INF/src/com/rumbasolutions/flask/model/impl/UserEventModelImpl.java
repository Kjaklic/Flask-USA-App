/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.UserEvent;
import com.rumbasolutions.flask.model.UserEventModel;
import com.rumbasolutions.flask.model.UserEventSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserEvent service. Represents a row in the &quot;flaskevents_UserEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.UserEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserEventImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see UserEventImpl
 * @see com.rumbasolutions.flask.model.UserEvent
 * @see com.rumbasolutions.flask.model.UserEventModel
 * @generated
 */
@JSON(strict = true)
public class UserEventModelImpl extends BaseModelImpl<UserEvent>
	implements UserEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user event model instance should use the {@link com.rumbasolutions.flask.model.UserEvent} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_UserEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userEventId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "eventId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_UserEvent (userEventId LONG not null primary key,userId LONG,eventId LONG,createdDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_UserEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY userEvent.userEventId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_UserEvent.userEventId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.UserEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.UserEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.UserEvent"),
			true);
	public static long EVENTID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long USEREVENTID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserEvent toModel(UserEventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserEvent model = new UserEventImpl();

		model.setUserEventId(soapModel.getUserEventId());
		model.setUserId(soapModel.getUserId());
		model.setEventId(soapModel.getEventId());
		model.setCreatedDate(soapModel.getCreatedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserEvent> toModels(UserEventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserEvent> models = new ArrayList<UserEvent>(soapModels.length);

		for (UserEventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.UserEvent"));

	public UserEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userEventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userEventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserEvent.class;
	}

	@Override
	public String getModelClassName() {
		return UserEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userEventId", getUserEventId());
		attributes.put("userId", getUserId());
		attributes.put("eventId", getEventId());
		attributes.put("createdDate", getCreatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userEventId = (Long)attributes.get("userEventId");

		if (userEventId != null) {
			setUserEventId(userEventId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}
	}

	@JSON
	@Override
	public long getUserEventId() {
		return _userEventId;
	}

	@Override
	public void setUserEventId(long userEventId) {
		_userEventId = userEventId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserEvent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserEventImpl userEventImpl = new UserEventImpl();

		userEventImpl.setUserEventId(getUserEventId());
		userEventImpl.setUserId(getUserId());
		userEventImpl.setEventId(getEventId());
		userEventImpl.setCreatedDate(getCreatedDate());

		userEventImpl.resetOriginalValues();

		return userEventImpl;
	}

	@Override
	public int compareTo(UserEvent userEvent) {
		long primaryKey = userEvent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserEvent)) {
			return false;
		}

		UserEvent userEvent = (UserEvent)obj;

		long primaryKey = userEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserEventModelImpl userEventModelImpl = this;

		userEventModelImpl._originalUserId = userEventModelImpl._userId;

		userEventModelImpl._setOriginalUserId = false;

		userEventModelImpl._originalEventId = userEventModelImpl._eventId;

		userEventModelImpl._setOriginalEventId = false;

		userEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserEvent> toCacheModel() {
		UserEventCacheModel userEventCacheModel = new UserEventCacheModel();

		userEventCacheModel.userEventId = getUserEventId();

		userEventCacheModel.userId = getUserId();

		userEventCacheModel.eventId = getEventId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			userEventCacheModel.createdDate = createdDate.getTime();
		}
		else {
			userEventCacheModel.createdDate = Long.MIN_VALUE;
		}

		return userEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{userEventId=");
		sb.append(getUserEventId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.UserEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userEventId</column-name><column-value><![CDATA[");
		sb.append(getUserEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserEvent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserEvent.class
		};
	private long _userEventId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private Date _createdDate;
	private long _columnBitmask;
	private UserEvent _escapedModel;
}