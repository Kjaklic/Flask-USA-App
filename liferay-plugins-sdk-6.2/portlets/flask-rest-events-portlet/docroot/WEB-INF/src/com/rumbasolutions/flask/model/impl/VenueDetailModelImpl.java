/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.VenueDetail;
import com.rumbasolutions.flask.model.VenueDetailModel;
import com.rumbasolutions.flask.model.VenueDetailSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VenueDetail service. Represents a row in the &quot;flaskevents_VenueDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.VenueDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VenueDetailImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see VenueDetailImpl
 * @see com.rumbasolutions.flask.model.VenueDetail
 * @see com.rumbasolutions.flask.model.VenueDetailModel
 * @generated
 */
@JSON(strict = true)
public class VenueDetailModelImpl extends BaseModelImpl<VenueDetail>
	implements VenueDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a venue detail model instance should use the {@link com.rumbasolutions.flask.model.VenueDetail} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_VenueDetail";
	public static final Object[][] TABLE_COLUMNS = {
			{ "venueDetailId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "venueId", Types.BIGINT },
			{ "infoTypeId", Types.BIGINT },
			{ "infoTypeCategoryId", Types.BIGINT },
			{ "venueDetailInfoName", Types.VARCHAR },
			{ "venueDetailInfoDesc", Types.VARCHAR },
			{ "venueDetailInfoComment", Types.VARCHAR },
			{ "venueDetailAddressLine1", Types.VARCHAR },
			{ "venueDetailAddressLine2", Types.VARCHAR },
			{ "venueDetailCity", Types.VARCHAR },
			{ "venueDetailState", Types.VARCHAR },
			{ "venueDetailCountry", Types.VARCHAR },
			{ "venueDetailLatitude", Types.VARCHAR },
			{ "venueDetailLongitude", Types.VARCHAR },
			{ "venueDetailPhone", Types.VARCHAR },
			{ "venueDetailWebsite", Types.VARCHAR },
			{ "venueDetailCost", Types.DOUBLE },
			{ "venueDetailhoursOfOperation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_VenueDetail (venueDetailId LONG not null primary key,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,venueId LONG,infoTypeId LONG,infoTypeCategoryId LONG,venueDetailInfoName VARCHAR(75) null,venueDetailInfoDesc VARCHAR(75) null,venueDetailInfoComment VARCHAR(75) null,venueDetailAddressLine1 VARCHAR(75) null,venueDetailAddressLine2 VARCHAR(75) null,venueDetailCity VARCHAR(75) null,venueDetailState VARCHAR(75) null,venueDetailCountry VARCHAR(75) null,venueDetailLatitude VARCHAR(75) null,venueDetailLongitude VARCHAR(75) null,venueDetailPhone VARCHAR(75) null,venueDetailWebsite VARCHAR(75) null,venueDetailCost DOUBLE,venueDetailhoursOfOperation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_VenueDetail";
	public static final String ORDER_BY_JPQL = " ORDER BY venueDetail.venueDetailId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_VenueDetail.venueDetailId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.VenueDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.VenueDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.VenueDetail"),
			true);
	public static long VENUEID_COLUMN_BITMASK = 1L;
	public static long VENUEDETAILID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VenueDetail toModel(VenueDetailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VenueDetail model = new VenueDetailImpl();

		model.setVenueDetailId(soapModel.getVenueDetailId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setVenueId(soapModel.getVenueId());
		model.setInfoTypeId(soapModel.getInfoTypeId());
		model.setInfoTypeCategoryId(soapModel.getInfoTypeCategoryId());
		model.setVenueDetailInfoName(soapModel.getVenueDetailInfoName());
		model.setVenueDetailInfoDesc(soapModel.getVenueDetailInfoDesc());
		model.setVenueDetailInfoComment(soapModel.getVenueDetailInfoComment());
		model.setVenueDetailAddressLine1(soapModel.getVenueDetailAddressLine1());
		model.setVenueDetailAddressLine2(soapModel.getVenueDetailAddressLine2());
		model.setVenueDetailCity(soapModel.getVenueDetailCity());
		model.setVenueDetailState(soapModel.getVenueDetailState());
		model.setVenueDetailCountry(soapModel.getVenueDetailCountry());
		model.setVenueDetailLatitude(soapModel.getVenueDetailLatitude());
		model.setVenueDetailLongitude(soapModel.getVenueDetailLongitude());
		model.setVenueDetailPhone(soapModel.getVenueDetailPhone());
		model.setVenueDetailWebsite(soapModel.getVenueDetailWebsite());
		model.setVenueDetailCost(soapModel.getVenueDetailCost());
		model.setVenueDetailhoursOfOperation(soapModel.getVenueDetailhoursOfOperation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VenueDetail> toModels(VenueDetailSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VenueDetail> models = new ArrayList<VenueDetail>(soapModels.length);

		for (VenueDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.VenueDetail"));

	public VenueDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _venueDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVenueDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _venueDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VenueDetail.class;
	}

	@Override
	public String getModelClassName() {
		return VenueDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("venueDetailId", getVenueDetailId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("venueId", getVenueId());
		attributes.put("infoTypeId", getInfoTypeId());
		attributes.put("infoTypeCategoryId", getInfoTypeCategoryId());
		attributes.put("venueDetailInfoName", getVenueDetailInfoName());
		attributes.put("venueDetailInfoDesc", getVenueDetailInfoDesc());
		attributes.put("venueDetailInfoComment", getVenueDetailInfoComment());
		attributes.put("venueDetailAddressLine1", getVenueDetailAddressLine1());
		attributes.put("venueDetailAddressLine2", getVenueDetailAddressLine2());
		attributes.put("venueDetailCity", getVenueDetailCity());
		attributes.put("venueDetailState", getVenueDetailState());
		attributes.put("venueDetailCountry", getVenueDetailCountry());
		attributes.put("venueDetailLatitude", getVenueDetailLatitude());
		attributes.put("venueDetailLongitude", getVenueDetailLongitude());
		attributes.put("venueDetailPhone", getVenueDetailPhone());
		attributes.put("venueDetailWebsite", getVenueDetailWebsite());
		attributes.put("venueDetailCost", getVenueDetailCost());
		attributes.put("venueDetailhoursOfOperation",
			getVenueDetailhoursOfOperation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long venueDetailId = (Long)attributes.get("venueDetailId");

		if (venueDetailId != null) {
			setVenueDetailId(venueDetailId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long venueId = (Long)attributes.get("venueId");

		if (venueId != null) {
			setVenueId(venueId);
		}

		Long infoTypeId = (Long)attributes.get("infoTypeId");

		if (infoTypeId != null) {
			setInfoTypeId(infoTypeId);
		}

		Long infoTypeCategoryId = (Long)attributes.get("infoTypeCategoryId");

		if (infoTypeCategoryId != null) {
			setInfoTypeCategoryId(infoTypeCategoryId);
		}

		String venueDetailInfoName = (String)attributes.get(
				"venueDetailInfoName");

		if (venueDetailInfoName != null) {
			setVenueDetailInfoName(venueDetailInfoName);
		}

		String venueDetailInfoDesc = (String)attributes.get(
				"venueDetailInfoDesc");

		if (venueDetailInfoDesc != null) {
			setVenueDetailInfoDesc(venueDetailInfoDesc);
		}

		String venueDetailInfoComment = (String)attributes.get(
				"venueDetailInfoComment");

		if (venueDetailInfoComment != null) {
			setVenueDetailInfoComment(venueDetailInfoComment);
		}

		String venueDetailAddressLine1 = (String)attributes.get(
				"venueDetailAddressLine1");

		if (venueDetailAddressLine1 != null) {
			setVenueDetailAddressLine1(venueDetailAddressLine1);
		}

		String venueDetailAddressLine2 = (String)attributes.get(
				"venueDetailAddressLine2");

		if (venueDetailAddressLine2 != null) {
			setVenueDetailAddressLine2(venueDetailAddressLine2);
		}

		String venueDetailCity = (String)attributes.get("venueDetailCity");

		if (venueDetailCity != null) {
			setVenueDetailCity(venueDetailCity);
		}

		String venueDetailState = (String)attributes.get("venueDetailState");

		if (venueDetailState != null) {
			setVenueDetailState(venueDetailState);
		}

		String venueDetailCountry = (String)attributes.get("venueDetailCountry");

		if (venueDetailCountry != null) {
			setVenueDetailCountry(venueDetailCountry);
		}

		String venueDetailLatitude = (String)attributes.get(
				"venueDetailLatitude");

		if (venueDetailLatitude != null) {
			setVenueDetailLatitude(venueDetailLatitude);
		}

		String venueDetailLongitude = (String)attributes.get(
				"venueDetailLongitude");

		if (venueDetailLongitude != null) {
			setVenueDetailLongitude(venueDetailLongitude);
		}

		String venueDetailPhone = (String)attributes.get("venueDetailPhone");

		if (venueDetailPhone != null) {
			setVenueDetailPhone(venueDetailPhone);
		}

		String venueDetailWebsite = (String)attributes.get("venueDetailWebsite");

		if (venueDetailWebsite != null) {
			setVenueDetailWebsite(venueDetailWebsite);
		}

		Double venueDetailCost = (Double)attributes.get("venueDetailCost");

		if (venueDetailCost != null) {
			setVenueDetailCost(venueDetailCost);
		}

		String venueDetailhoursOfOperation = (String)attributes.get(
				"venueDetailhoursOfOperation");

		if (venueDetailhoursOfOperation != null) {
			setVenueDetailhoursOfOperation(venueDetailhoursOfOperation);
		}
	}

	@JSON
	@Override
	public long getVenueDetailId() {
		return _venueDetailId;
	}

	@Override
	public void setVenueDetailId(long venueDetailId) {
		_venueDetailId = venueDetailId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getVenueId() {
		return _venueId;
	}

	@Override
	public void setVenueId(long venueId) {
		_columnBitmask |= VENUEID_COLUMN_BITMASK;

		if (!_setOriginalVenueId) {
			_setOriginalVenueId = true;

			_originalVenueId = _venueId;
		}

		_venueId = venueId;
	}

	public long getOriginalVenueId() {
		return _originalVenueId;
	}

	@JSON
	@Override
	public long getInfoTypeId() {
		return _infoTypeId;
	}

	@Override
	public void setInfoTypeId(long infoTypeId) {
		_infoTypeId = infoTypeId;
	}

	@JSON
	@Override
	public long getInfoTypeCategoryId() {
		return _infoTypeCategoryId;
	}

	@Override
	public void setInfoTypeCategoryId(long infoTypeCategoryId) {
		_infoTypeCategoryId = infoTypeCategoryId;
	}

	@JSON
	@Override
	public String getVenueDetailInfoName() {
		if (_venueDetailInfoName == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailInfoName;
		}
	}

	@Override
	public void setVenueDetailInfoName(String venueDetailInfoName) {
		_venueDetailInfoName = venueDetailInfoName;
	}

	@JSON
	@Override
	public String getVenueDetailInfoDesc() {
		if (_venueDetailInfoDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailInfoDesc;
		}
	}

	@Override
	public void setVenueDetailInfoDesc(String venueDetailInfoDesc) {
		_venueDetailInfoDesc = venueDetailInfoDesc;
	}

	@JSON
	@Override
	public String getVenueDetailInfoComment() {
		if (_venueDetailInfoComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailInfoComment;
		}
	}

	@Override
	public void setVenueDetailInfoComment(String venueDetailInfoComment) {
		_venueDetailInfoComment = venueDetailInfoComment;
	}

	@JSON
	@Override
	public String getVenueDetailAddressLine1() {
		if (_venueDetailAddressLine1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailAddressLine1;
		}
	}

	@Override
	public void setVenueDetailAddressLine1(String venueDetailAddressLine1) {
		_venueDetailAddressLine1 = venueDetailAddressLine1;
	}

	@JSON
	@Override
	public String getVenueDetailAddressLine2() {
		if (_venueDetailAddressLine2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailAddressLine2;
		}
	}

	@Override
	public void setVenueDetailAddressLine2(String venueDetailAddressLine2) {
		_venueDetailAddressLine2 = venueDetailAddressLine2;
	}

	@JSON
	@Override
	public String getVenueDetailCity() {
		if (_venueDetailCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailCity;
		}
	}

	@Override
	public void setVenueDetailCity(String venueDetailCity) {
		_venueDetailCity = venueDetailCity;
	}

	@JSON
	@Override
	public String getVenueDetailState() {
		if (_venueDetailState == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailState;
		}
	}

	@Override
	public void setVenueDetailState(String venueDetailState) {
		_venueDetailState = venueDetailState;
	}

	@JSON
	@Override
	public String getVenueDetailCountry() {
		if (_venueDetailCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailCountry;
		}
	}

	@Override
	public void setVenueDetailCountry(String venueDetailCountry) {
		_venueDetailCountry = venueDetailCountry;
	}

	@JSON
	@Override
	public String getVenueDetailLatitude() {
		if (_venueDetailLatitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailLatitude;
		}
	}

	@Override
	public void setVenueDetailLatitude(String venueDetailLatitude) {
		_venueDetailLatitude = venueDetailLatitude;
	}

	@JSON
	@Override
	public String getVenueDetailLongitude() {
		if (_venueDetailLongitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailLongitude;
		}
	}

	@Override
	public void setVenueDetailLongitude(String venueDetailLongitude) {
		_venueDetailLongitude = venueDetailLongitude;
	}

	@JSON
	@Override
	public String getVenueDetailPhone() {
		if (_venueDetailPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailPhone;
		}
	}

	@Override
	public void setVenueDetailPhone(String venueDetailPhone) {
		_venueDetailPhone = venueDetailPhone;
	}

	@JSON
	@Override
	public String getVenueDetailWebsite() {
		if (_venueDetailWebsite == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailWebsite;
		}
	}

	@Override
	public void setVenueDetailWebsite(String venueDetailWebsite) {
		_venueDetailWebsite = venueDetailWebsite;
	}

	@JSON
	@Override
	public double getVenueDetailCost() {
		return _venueDetailCost;
	}

	@Override
	public void setVenueDetailCost(double venueDetailCost) {
		_venueDetailCost = venueDetailCost;
	}

	@JSON
	@Override
	public String getVenueDetailhoursOfOperation() {
		if (_venueDetailhoursOfOperation == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDetailhoursOfOperation;
		}
	}

	@Override
	public void setVenueDetailhoursOfOperation(
		String venueDetailhoursOfOperation) {
		_venueDetailhoursOfOperation = venueDetailhoursOfOperation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VenueDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VenueDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VenueDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VenueDetailImpl venueDetailImpl = new VenueDetailImpl();

		venueDetailImpl.setVenueDetailId(getVenueDetailId());
		venueDetailImpl.setCompanyId(getCompanyId());
		venueDetailImpl.setUserId(getUserId());
		venueDetailImpl.setCreatedDate(getCreatedDate());
		venueDetailImpl.setModifiedDate(getModifiedDate());
		venueDetailImpl.setVenueId(getVenueId());
		venueDetailImpl.setInfoTypeId(getInfoTypeId());
		venueDetailImpl.setInfoTypeCategoryId(getInfoTypeCategoryId());
		venueDetailImpl.setVenueDetailInfoName(getVenueDetailInfoName());
		venueDetailImpl.setVenueDetailInfoDesc(getVenueDetailInfoDesc());
		venueDetailImpl.setVenueDetailInfoComment(getVenueDetailInfoComment());
		venueDetailImpl.setVenueDetailAddressLine1(getVenueDetailAddressLine1());
		venueDetailImpl.setVenueDetailAddressLine2(getVenueDetailAddressLine2());
		venueDetailImpl.setVenueDetailCity(getVenueDetailCity());
		venueDetailImpl.setVenueDetailState(getVenueDetailState());
		venueDetailImpl.setVenueDetailCountry(getVenueDetailCountry());
		venueDetailImpl.setVenueDetailLatitude(getVenueDetailLatitude());
		venueDetailImpl.setVenueDetailLongitude(getVenueDetailLongitude());
		venueDetailImpl.setVenueDetailPhone(getVenueDetailPhone());
		venueDetailImpl.setVenueDetailWebsite(getVenueDetailWebsite());
		venueDetailImpl.setVenueDetailCost(getVenueDetailCost());
		venueDetailImpl.setVenueDetailhoursOfOperation(getVenueDetailhoursOfOperation());

		venueDetailImpl.resetOriginalValues();

		return venueDetailImpl;
	}

	@Override
	public int compareTo(VenueDetail venueDetail) {
		long primaryKey = venueDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VenueDetail)) {
			return false;
		}

		VenueDetail venueDetail = (VenueDetail)obj;

		long primaryKey = venueDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VenueDetailModelImpl venueDetailModelImpl = this;

		venueDetailModelImpl._originalVenueId = venueDetailModelImpl._venueId;

		venueDetailModelImpl._setOriginalVenueId = false;

		venueDetailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VenueDetail> toCacheModel() {
		VenueDetailCacheModel venueDetailCacheModel = new VenueDetailCacheModel();

		venueDetailCacheModel.venueDetailId = getVenueDetailId();

		venueDetailCacheModel.companyId = getCompanyId();

		venueDetailCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			venueDetailCacheModel.createdDate = createdDate.getTime();
		}
		else {
			venueDetailCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			venueDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			venueDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		venueDetailCacheModel.venueId = getVenueId();

		venueDetailCacheModel.infoTypeId = getInfoTypeId();

		venueDetailCacheModel.infoTypeCategoryId = getInfoTypeCategoryId();

		venueDetailCacheModel.venueDetailInfoName = getVenueDetailInfoName();

		String venueDetailInfoName = venueDetailCacheModel.venueDetailInfoName;

		if ((venueDetailInfoName != null) &&
				(venueDetailInfoName.length() == 0)) {
			venueDetailCacheModel.venueDetailInfoName = null;
		}

		venueDetailCacheModel.venueDetailInfoDesc = getVenueDetailInfoDesc();

		String venueDetailInfoDesc = venueDetailCacheModel.venueDetailInfoDesc;

		if ((venueDetailInfoDesc != null) &&
				(venueDetailInfoDesc.length() == 0)) {
			venueDetailCacheModel.venueDetailInfoDesc = null;
		}

		venueDetailCacheModel.venueDetailInfoComment = getVenueDetailInfoComment();

		String venueDetailInfoComment = venueDetailCacheModel.venueDetailInfoComment;

		if ((venueDetailInfoComment != null) &&
				(venueDetailInfoComment.length() == 0)) {
			venueDetailCacheModel.venueDetailInfoComment = null;
		}

		venueDetailCacheModel.venueDetailAddressLine1 = getVenueDetailAddressLine1();

		String venueDetailAddressLine1 = venueDetailCacheModel.venueDetailAddressLine1;

		if ((venueDetailAddressLine1 != null) &&
				(venueDetailAddressLine1.length() == 0)) {
			venueDetailCacheModel.venueDetailAddressLine1 = null;
		}

		venueDetailCacheModel.venueDetailAddressLine2 = getVenueDetailAddressLine2();

		String venueDetailAddressLine2 = venueDetailCacheModel.venueDetailAddressLine2;

		if ((venueDetailAddressLine2 != null) &&
				(venueDetailAddressLine2.length() == 0)) {
			venueDetailCacheModel.venueDetailAddressLine2 = null;
		}

		venueDetailCacheModel.venueDetailCity = getVenueDetailCity();

		String venueDetailCity = venueDetailCacheModel.venueDetailCity;

		if ((venueDetailCity != null) && (venueDetailCity.length() == 0)) {
			venueDetailCacheModel.venueDetailCity = null;
		}

		venueDetailCacheModel.venueDetailState = getVenueDetailState();

		String venueDetailState = venueDetailCacheModel.venueDetailState;

		if ((venueDetailState != null) && (venueDetailState.length() == 0)) {
			venueDetailCacheModel.venueDetailState = null;
		}

		venueDetailCacheModel.venueDetailCountry = getVenueDetailCountry();

		String venueDetailCountry = venueDetailCacheModel.venueDetailCountry;

		if ((venueDetailCountry != null) && (venueDetailCountry.length() == 0)) {
			venueDetailCacheModel.venueDetailCountry = null;
		}

		venueDetailCacheModel.venueDetailLatitude = getVenueDetailLatitude();

		String venueDetailLatitude = venueDetailCacheModel.venueDetailLatitude;

		if ((venueDetailLatitude != null) &&
				(venueDetailLatitude.length() == 0)) {
			venueDetailCacheModel.venueDetailLatitude = null;
		}

		venueDetailCacheModel.venueDetailLongitude = getVenueDetailLongitude();

		String venueDetailLongitude = venueDetailCacheModel.venueDetailLongitude;

		if ((venueDetailLongitude != null) &&
				(venueDetailLongitude.length() == 0)) {
			venueDetailCacheModel.venueDetailLongitude = null;
		}

		venueDetailCacheModel.venueDetailPhone = getVenueDetailPhone();

		String venueDetailPhone = venueDetailCacheModel.venueDetailPhone;

		if ((venueDetailPhone != null) && (venueDetailPhone.length() == 0)) {
			venueDetailCacheModel.venueDetailPhone = null;
		}

		venueDetailCacheModel.venueDetailWebsite = getVenueDetailWebsite();

		String venueDetailWebsite = venueDetailCacheModel.venueDetailWebsite;

		if ((venueDetailWebsite != null) && (venueDetailWebsite.length() == 0)) {
			venueDetailCacheModel.venueDetailWebsite = null;
		}

		venueDetailCacheModel.venueDetailCost = getVenueDetailCost();

		venueDetailCacheModel.venueDetailhoursOfOperation = getVenueDetailhoursOfOperation();

		String venueDetailhoursOfOperation = venueDetailCacheModel.venueDetailhoursOfOperation;

		if ((venueDetailhoursOfOperation != null) &&
				(venueDetailhoursOfOperation.length() == 0)) {
			venueDetailCacheModel.venueDetailhoursOfOperation = null;
		}

		return venueDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{venueDetailId=");
		sb.append(getVenueDetailId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", venueId=");
		sb.append(getVenueId());
		sb.append(", infoTypeId=");
		sb.append(getInfoTypeId());
		sb.append(", infoTypeCategoryId=");
		sb.append(getInfoTypeCategoryId());
		sb.append(", venueDetailInfoName=");
		sb.append(getVenueDetailInfoName());
		sb.append(", venueDetailInfoDesc=");
		sb.append(getVenueDetailInfoDesc());
		sb.append(", venueDetailInfoComment=");
		sb.append(getVenueDetailInfoComment());
		sb.append(", venueDetailAddressLine1=");
		sb.append(getVenueDetailAddressLine1());
		sb.append(", venueDetailAddressLine2=");
		sb.append(getVenueDetailAddressLine2());
		sb.append(", venueDetailCity=");
		sb.append(getVenueDetailCity());
		sb.append(", venueDetailState=");
		sb.append(getVenueDetailState());
		sb.append(", venueDetailCountry=");
		sb.append(getVenueDetailCountry());
		sb.append(", venueDetailLatitude=");
		sb.append(getVenueDetailLatitude());
		sb.append(", venueDetailLongitude=");
		sb.append(getVenueDetailLongitude());
		sb.append(", venueDetailPhone=");
		sb.append(getVenueDetailPhone());
		sb.append(", venueDetailWebsite=");
		sb.append(getVenueDetailWebsite());
		sb.append(", venueDetailCost=");
		sb.append(getVenueDetailCost());
		sb.append(", venueDetailhoursOfOperation=");
		sb.append(getVenueDetailhoursOfOperation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.VenueDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>venueDetailId</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueId</column-name><column-value><![CDATA[");
		sb.append(getVenueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeCategoryId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailInfoName</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailInfoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailInfoDesc</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailInfoDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailInfoComment</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailInfoComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailAddressLine1</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailAddressLine1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailAddressLine2</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailAddressLine2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailCity</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailState</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailCountry</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailLatitude</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailLongitude</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailPhone</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailWebsite</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailCost</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailhoursOfOperation</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailhoursOfOperation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VenueDetail.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VenueDetail.class
		};
	private long _venueDetailId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _venueId;
	private long _originalVenueId;
	private boolean _setOriginalVenueId;
	private long _infoTypeId;
	private long _infoTypeCategoryId;
	private String _venueDetailInfoName;
	private String _venueDetailInfoDesc;
	private String _venueDetailInfoComment;
	private String _venueDetailAddressLine1;
	private String _venueDetailAddressLine2;
	private String _venueDetailCity;
	private String _venueDetailState;
	private String _venueDetailCountry;
	private String _venueDetailLatitude;
	private String _venueDetailLongitude;
	private String _venueDetailPhone;
	private String _venueDetailWebsite;
	private double _venueDetailCost;
	private String _venueDetailhoursOfOperation;
	private long _columnBitmask;
	private VenueDetail _escapedModel;
}