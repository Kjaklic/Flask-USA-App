/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.VenueDetail;
import com.rumbasolutions.flask.model.VenueDetailModel;
import com.rumbasolutions.flask.model.VenueDetailSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VenueDetail service. Represents a row in the &quot;flaskevents_VenueDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.VenueDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VenueDetailImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see VenueDetailImpl
 * @see com.rumbasolutions.flask.model.VenueDetail
 * @see com.rumbasolutions.flask.model.VenueDetailModel
 * @generated
 */
@JSON(strict = true)
public class VenueDetailModelImpl extends BaseModelImpl<VenueDetail>
	implements VenueDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a venue detail model instance should use the {@link com.rumbasolutions.flask.model.VenueDetail} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_VenueDetail";
	public static final Object[][] TABLE_COLUMNS = {
			{ "venueDetailId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "venueId", Types.BIGINT },
			{ "infoTypeId", Types.BIGINT },
			{ "infoTypeName", Types.VARCHAR },
			{ "infoTypeCategoryId", Types.BIGINT },
			{ "infoTypeCategoryName", Types.VARCHAR },
			{ "infoTitle", Types.VARCHAR },
			{ "infoDesc", Types.VARCHAR },
			{ "addrLine1", Types.VARCHAR },
			{ "addrLine2", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR },
			{ "stateId", Types.BIGINT },
			{ "stateName", Types.VARCHAR },
			{ "countryId", Types.BIGINT },
			{ "countryName", Types.VARCHAR },
			{ "latitude", Types.VARCHAR },
			{ "longitude", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "website", Types.VARCHAR },
			{ "cost", Types.DOUBLE },
			{ "hoursOfOperation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_VenueDetail (venueDetailId LONG not null primary key,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,venueId LONG,infoTypeId LONG,infoTypeName VARCHAR(75) null,infoTypeCategoryId LONG,infoTypeCategoryName VARCHAR(75) null,infoTitle VARCHAR(100) null,infoDesc VARCHAR(255) null,addrLine1 VARCHAR(100) null,addrLine2 VARCHAR(100) null,city VARCHAR(100) null,zipCode VARCHAR(20) null,stateId LONG,stateName VARCHAR(100) null,countryId LONG,countryName VARCHAR(100) null,latitude VARCHAR(20) null,longitude VARCHAR(20) null,phone VARCHAR(20) null,website VARCHAR(255) null,cost DOUBLE,hoursOfOperation VARCHAR(255) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_VenueDetail";
	public static final String ORDER_BY_JPQL = " ORDER BY venueDetail.venueDetailId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_VenueDetail.venueDetailId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.VenueDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.VenueDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.VenueDetail"),
			true);
	public static long VENUEID_COLUMN_BITMASK = 1L;
	public static long VENUEDETAILID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VenueDetail toModel(VenueDetailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VenueDetail model = new VenueDetailImpl();

		model.setVenueDetailId(soapModel.getVenueDetailId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setVenueId(soapModel.getVenueId());
		model.setInfoTypeId(soapModel.getInfoTypeId());
		model.setInfoTypeName(soapModel.getInfoTypeName());
		model.setInfoTypeCategoryId(soapModel.getInfoTypeCategoryId());
		model.setInfoTypeCategoryName(soapModel.getInfoTypeCategoryName());
		model.setInfoTitle(soapModel.getInfoTitle());
		model.setInfoDesc(soapModel.getInfoDesc());
		model.setAddrLine1(soapModel.getAddrLine1());
		model.setAddrLine2(soapModel.getAddrLine2());
		model.setCity(soapModel.getCity());
		model.setZipCode(soapModel.getZipCode());
		model.setStateId(soapModel.getStateId());
		model.setStateName(soapModel.getStateName());
		model.setCountryId(soapModel.getCountryId());
		model.setCountryName(soapModel.getCountryName());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setPhone(soapModel.getPhone());
		model.setWebsite(soapModel.getWebsite());
		model.setCost(soapModel.getCost());
		model.setHoursOfOperation(soapModel.getHoursOfOperation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VenueDetail> toModels(VenueDetailSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VenueDetail> models = new ArrayList<VenueDetail>(soapModels.length);

		for (VenueDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.VenueDetail"));

	public VenueDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _venueDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVenueDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _venueDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VenueDetail.class;
	}

	@Override
	public String getModelClassName() {
		return VenueDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("venueDetailId", getVenueDetailId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("venueId", getVenueId());
		attributes.put("infoTypeId", getInfoTypeId());
		attributes.put("infoTypeName", getInfoTypeName());
		attributes.put("infoTypeCategoryId", getInfoTypeCategoryId());
		attributes.put("infoTypeCategoryName", getInfoTypeCategoryName());
		attributes.put("infoTitle", getInfoTitle());
		attributes.put("infoDesc", getInfoDesc());
		attributes.put("addrLine1", getAddrLine1());
		attributes.put("addrLine2", getAddrLine2());
		attributes.put("city", getCity());
		attributes.put("zipCode", getZipCode());
		attributes.put("stateId", getStateId());
		attributes.put("stateName", getStateName());
		attributes.put("countryId", getCountryId());
		attributes.put("countryName", getCountryName());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("phone", getPhone());
		attributes.put("website", getWebsite());
		attributes.put("cost", getCost());
		attributes.put("hoursOfOperation", getHoursOfOperation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long venueDetailId = (Long)attributes.get("venueDetailId");

		if (venueDetailId != null) {
			setVenueDetailId(venueDetailId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long venueId = (Long)attributes.get("venueId");

		if (venueId != null) {
			setVenueId(venueId);
		}

		Long infoTypeId = (Long)attributes.get("infoTypeId");

		if (infoTypeId != null) {
			setInfoTypeId(infoTypeId);
		}

		String infoTypeName = (String)attributes.get("infoTypeName");

		if (infoTypeName != null) {
			setInfoTypeName(infoTypeName);
		}

		Long infoTypeCategoryId = (Long)attributes.get("infoTypeCategoryId");

		if (infoTypeCategoryId != null) {
			setInfoTypeCategoryId(infoTypeCategoryId);
		}

		String infoTypeCategoryName = (String)attributes.get(
				"infoTypeCategoryName");

		if (infoTypeCategoryName != null) {
			setInfoTypeCategoryName(infoTypeCategoryName);
		}

		String infoTitle = (String)attributes.get("infoTitle");

		if (infoTitle != null) {
			setInfoTitle(infoTitle);
		}

		String infoDesc = (String)attributes.get("infoDesc");

		if (infoDesc != null) {
			setInfoDesc(infoDesc);
		}

		String addrLine1 = (String)attributes.get("addrLine1");

		if (addrLine1 != null) {
			setAddrLine1(addrLine1);
		}

		String addrLine2 = (String)attributes.get("addrLine2");

		if (addrLine2 != null) {
			setAddrLine2(addrLine2);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}

		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		String stateName = (String)attributes.get("stateName");

		if (stateName != null) {
			setStateName(stateName);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String countryName = (String)attributes.get("countryName");

		if (countryName != null) {
			setCountryName(countryName);
		}

		String latitude = (String)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		String longitude = (String)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String website = (String)attributes.get("website");

		if (website != null) {
			setWebsite(website);
		}

		Double cost = (Double)attributes.get("cost");

		if (cost != null) {
			setCost(cost);
		}

		String hoursOfOperation = (String)attributes.get("hoursOfOperation");

		if (hoursOfOperation != null) {
			setHoursOfOperation(hoursOfOperation);
		}
	}

	@JSON
	@Override
	public long getVenueDetailId() {
		return _venueDetailId;
	}

	@Override
	public void setVenueDetailId(long venueDetailId) {
		_venueDetailId = venueDetailId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getVenueId() {
		return _venueId;
	}

	@Override
	public void setVenueId(long venueId) {
		_columnBitmask |= VENUEID_COLUMN_BITMASK;

		if (!_setOriginalVenueId) {
			_setOriginalVenueId = true;

			_originalVenueId = _venueId;
		}

		_venueId = venueId;
	}

	public long getOriginalVenueId() {
		return _originalVenueId;
	}

	@JSON
	@Override
	public long getInfoTypeId() {
		return _infoTypeId;
	}

	@Override
	public void setInfoTypeId(long infoTypeId) {
		_infoTypeId = infoTypeId;
	}

	@JSON
	@Override
	public String getInfoTypeName() {
		if (_infoTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _infoTypeName;
		}
	}

	@Override
	public void setInfoTypeName(String infoTypeName) {
		_infoTypeName = infoTypeName;
	}

	@JSON
	@Override
	public long getInfoTypeCategoryId() {
		return _infoTypeCategoryId;
	}

	@Override
	public void setInfoTypeCategoryId(long infoTypeCategoryId) {
		_infoTypeCategoryId = infoTypeCategoryId;
	}

	@JSON
	@Override
	public String getInfoTypeCategoryName() {
		if (_infoTypeCategoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _infoTypeCategoryName;
		}
	}

	@Override
	public void setInfoTypeCategoryName(String infoTypeCategoryName) {
		_infoTypeCategoryName = infoTypeCategoryName;
	}

	@JSON
	@Override
	public String getInfoTitle() {
		if (_infoTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _infoTitle;
		}
	}

	@Override
	public void setInfoTitle(String infoTitle) {
		_infoTitle = infoTitle;
	}

	@JSON
	@Override
	public String getInfoDesc() {
		if (_infoDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _infoDesc;
		}
	}

	@Override
	public void setInfoDesc(String infoDesc) {
		_infoDesc = infoDesc;
	}

	@JSON
	@Override
	public String getAddrLine1() {
		if (_addrLine1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _addrLine1;
		}
	}

	@Override
	public void setAddrLine1(String addrLine1) {
		_addrLine1 = addrLine1;
	}

	@JSON
	@Override
	public String getAddrLine2() {
		if (_addrLine2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _addrLine2;
		}
	}

	@Override
	public void setAddrLine2(String addrLine2) {
		_addrLine2 = addrLine2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public String getStateName() {
		if (_stateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		_stateName = stateName;
	}

	@JSON
	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@JSON
	@Override
	public String getCountryName() {
		if (_countryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryName;
		}
	}

	@Override
	public void setCountryName(String countryName) {
		_countryName = countryName;
	}

	@JSON
	@Override
	public String getLatitude() {
		if (_latitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _latitude;
		}
	}

	@Override
	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public String getLongitude() {
		if (_longitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _longitude;
		}
	}

	@Override
	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getWebsite() {
		if (_website == null) {
			return StringPool.BLANK;
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		_website = website;
	}

	@JSON
	@Override
	public double getCost() {
		return _cost;
	}

	@Override
	public void setCost(double cost) {
		_cost = cost;
	}

	@JSON
	@Override
	public String getHoursOfOperation() {
		if (_hoursOfOperation == null) {
			return StringPool.BLANK;
		}
		else {
			return _hoursOfOperation;
		}
	}

	@Override
	public void setHoursOfOperation(String hoursOfOperation) {
		_hoursOfOperation = hoursOfOperation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			VenueDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VenueDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VenueDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VenueDetailImpl venueDetailImpl = new VenueDetailImpl();

		venueDetailImpl.setVenueDetailId(getVenueDetailId());
		venueDetailImpl.setCompanyId(getCompanyId());
		venueDetailImpl.setUserId(getUserId());
		venueDetailImpl.setCreatedDate(getCreatedDate());
		venueDetailImpl.setModifiedDate(getModifiedDate());
		venueDetailImpl.setVenueId(getVenueId());
		venueDetailImpl.setInfoTypeId(getInfoTypeId());
		venueDetailImpl.setInfoTypeName(getInfoTypeName());
		venueDetailImpl.setInfoTypeCategoryId(getInfoTypeCategoryId());
		venueDetailImpl.setInfoTypeCategoryName(getInfoTypeCategoryName());
		venueDetailImpl.setInfoTitle(getInfoTitle());
		venueDetailImpl.setInfoDesc(getInfoDesc());
		venueDetailImpl.setAddrLine1(getAddrLine1());
		venueDetailImpl.setAddrLine2(getAddrLine2());
		venueDetailImpl.setCity(getCity());
		venueDetailImpl.setZipCode(getZipCode());
		venueDetailImpl.setStateId(getStateId());
		venueDetailImpl.setStateName(getStateName());
		venueDetailImpl.setCountryId(getCountryId());
		venueDetailImpl.setCountryName(getCountryName());
		venueDetailImpl.setLatitude(getLatitude());
		venueDetailImpl.setLongitude(getLongitude());
		venueDetailImpl.setPhone(getPhone());
		venueDetailImpl.setWebsite(getWebsite());
		venueDetailImpl.setCost(getCost());
		venueDetailImpl.setHoursOfOperation(getHoursOfOperation());

		venueDetailImpl.resetOriginalValues();

		return venueDetailImpl;
	}

	@Override
	public int compareTo(VenueDetail venueDetail) {
		long primaryKey = venueDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VenueDetail)) {
			return false;
		}

		VenueDetail venueDetail = (VenueDetail)obj;

		long primaryKey = venueDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VenueDetailModelImpl venueDetailModelImpl = this;

		venueDetailModelImpl._originalVenueId = venueDetailModelImpl._venueId;

		venueDetailModelImpl._setOriginalVenueId = false;

		venueDetailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VenueDetail> toCacheModel() {
		VenueDetailCacheModel venueDetailCacheModel = new VenueDetailCacheModel();

		venueDetailCacheModel.venueDetailId = getVenueDetailId();

		venueDetailCacheModel.companyId = getCompanyId();

		venueDetailCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			venueDetailCacheModel.createdDate = createdDate.getTime();
		}
		else {
			venueDetailCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			venueDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			venueDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		venueDetailCacheModel.venueId = getVenueId();

		venueDetailCacheModel.infoTypeId = getInfoTypeId();

		venueDetailCacheModel.infoTypeName = getInfoTypeName();

		String infoTypeName = venueDetailCacheModel.infoTypeName;

		if ((infoTypeName != null) && (infoTypeName.length() == 0)) {
			venueDetailCacheModel.infoTypeName = null;
		}

		venueDetailCacheModel.infoTypeCategoryId = getInfoTypeCategoryId();

		venueDetailCacheModel.infoTypeCategoryName = getInfoTypeCategoryName();

		String infoTypeCategoryName = venueDetailCacheModel.infoTypeCategoryName;

		if ((infoTypeCategoryName != null) &&
				(infoTypeCategoryName.length() == 0)) {
			venueDetailCacheModel.infoTypeCategoryName = null;
		}

		venueDetailCacheModel.infoTitle = getInfoTitle();

		String infoTitle = venueDetailCacheModel.infoTitle;

		if ((infoTitle != null) && (infoTitle.length() == 0)) {
			venueDetailCacheModel.infoTitle = null;
		}

		venueDetailCacheModel.infoDesc = getInfoDesc();

		String infoDesc = venueDetailCacheModel.infoDesc;

		if ((infoDesc != null) && (infoDesc.length() == 0)) {
			venueDetailCacheModel.infoDesc = null;
		}

		venueDetailCacheModel.addrLine1 = getAddrLine1();

		String addrLine1 = venueDetailCacheModel.addrLine1;

		if ((addrLine1 != null) && (addrLine1.length() == 0)) {
			venueDetailCacheModel.addrLine1 = null;
		}

		venueDetailCacheModel.addrLine2 = getAddrLine2();

		String addrLine2 = venueDetailCacheModel.addrLine2;

		if ((addrLine2 != null) && (addrLine2.length() == 0)) {
			venueDetailCacheModel.addrLine2 = null;
		}

		venueDetailCacheModel.city = getCity();

		String city = venueDetailCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			venueDetailCacheModel.city = null;
		}

		venueDetailCacheModel.zipCode = getZipCode();

		String zipCode = venueDetailCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			venueDetailCacheModel.zipCode = null;
		}

		venueDetailCacheModel.stateId = getStateId();

		venueDetailCacheModel.stateName = getStateName();

		String stateName = venueDetailCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			venueDetailCacheModel.stateName = null;
		}

		venueDetailCacheModel.countryId = getCountryId();

		venueDetailCacheModel.countryName = getCountryName();

		String countryName = venueDetailCacheModel.countryName;

		if ((countryName != null) && (countryName.length() == 0)) {
			venueDetailCacheModel.countryName = null;
		}

		venueDetailCacheModel.latitude = getLatitude();

		String latitude = venueDetailCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			venueDetailCacheModel.latitude = null;
		}

		venueDetailCacheModel.longitude = getLongitude();

		String longitude = venueDetailCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			venueDetailCacheModel.longitude = null;
		}

		venueDetailCacheModel.phone = getPhone();

		String phone = venueDetailCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			venueDetailCacheModel.phone = null;
		}

		venueDetailCacheModel.website = getWebsite();

		String website = venueDetailCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			venueDetailCacheModel.website = null;
		}

		venueDetailCacheModel.cost = getCost();

		venueDetailCacheModel.hoursOfOperation = getHoursOfOperation();

		String hoursOfOperation = venueDetailCacheModel.hoursOfOperation;

		if ((hoursOfOperation != null) && (hoursOfOperation.length() == 0)) {
			venueDetailCacheModel.hoursOfOperation = null;
		}

		return venueDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{venueDetailId=");
		sb.append(getVenueDetailId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", venueId=");
		sb.append(getVenueId());
		sb.append(", infoTypeId=");
		sb.append(getInfoTypeId());
		sb.append(", infoTypeName=");
		sb.append(getInfoTypeName());
		sb.append(", infoTypeCategoryId=");
		sb.append(getInfoTypeCategoryId());
		sb.append(", infoTypeCategoryName=");
		sb.append(getInfoTypeCategoryName());
		sb.append(", infoTitle=");
		sb.append(getInfoTitle());
		sb.append(", infoDesc=");
		sb.append(getInfoDesc());
		sb.append(", addrLine1=");
		sb.append(getAddrLine1());
		sb.append(", addrLine2=");
		sb.append(getAddrLine2());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", stateName=");
		sb.append(getStateName());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", countryName=");
		sb.append(getCountryName());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", website=");
		sb.append(getWebsite());
		sb.append(", cost=");
		sb.append(getCost());
		sb.append(", hoursOfOperation=");
		sb.append(getHoursOfOperation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.VenueDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>venueDetailId</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueId</column-name><column-value><![CDATA[");
		sb.append(getVenueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeName</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeCategoryId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeCategoryName</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTitle</column-name><column-value><![CDATA[");
		sb.append(getInfoTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoDesc</column-name><column-value><![CDATA[");
		sb.append(getInfoDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addrLine1</column-name><column-value><![CDATA[");
		sb.append(getAddrLine1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addrLine2</column-name><column-value><![CDATA[");
		sb.append(getAddrLine2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateName</column-name><column-value><![CDATA[");
		sb.append(getStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryName</column-name><column-value><![CDATA[");
		sb.append(getCountryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>website</column-name><column-value><![CDATA[");
		sb.append(getWebsite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cost</column-name><column-value><![CDATA[");
		sb.append(getCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoursOfOperation</column-name><column-value><![CDATA[");
		sb.append(getHoursOfOperation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VenueDetail.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VenueDetail.class
		};
	private long _venueDetailId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _venueId;
	private long _originalVenueId;
	private boolean _setOriginalVenueId;
	private long _infoTypeId;
	private String _infoTypeName;
	private long _infoTypeCategoryId;
	private String _infoTypeCategoryName;
	private String _infoTitle;
	private String _infoDesc;
	private String _addrLine1;
	private String _addrLine2;
	private String _city;
	private String _zipCode;
	private long _stateId;
	private String _stateName;
	private long _countryId;
	private String _countryName;
	private String _latitude;
	private String _longitude;
	private String _phone;
	private String _website;
	private double _cost;
	private String _hoursOfOperation;
	private long _columnBitmask;
	private VenueDetail _escapedModel;
}