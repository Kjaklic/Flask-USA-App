/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.VenueDeviceImage;
import com.rumbasolutions.flask.model.VenueDeviceImageModel;
import com.rumbasolutions.flask.model.VenueDeviceImageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VenueDeviceImage service. Represents a row in the &quot;flaskevents_VenueDeviceImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.VenueDeviceImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VenueDeviceImageImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see VenueDeviceImageImpl
 * @see com.rumbasolutions.flask.model.VenueDeviceImage
 * @see com.rumbasolutions.flask.model.VenueDeviceImageModel
 * @generated
 */
@JSON(strict = true)
public class VenueDeviceImageModelImpl extends BaseModelImpl<VenueDeviceImage>
	implements VenueDeviceImageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a venue device image model instance should use the {@link com.rumbasolutions.flask.model.VenueDeviceImage} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_VenueDeviceImage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "venueDeviceImageId", Types.BIGINT },
			{ "venueDetailImageId", Types.BIGINT },
			{ "venueId", Types.BIGINT },
			{ "deviceType", Types.VARCHAR },
			{ "venueDeviceImageUUID", Types.VARCHAR },
			{ "aspectRatio", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_VenueDeviceImage (venueDeviceImageId LONG not null primary key,venueDetailImageId LONG,venueId LONG,deviceType VARCHAR(75) null,venueDeviceImageUUID VARCHAR(75) null,aspectRatio VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_VenueDeviceImage";
	public static final String ORDER_BY_JPQL = " ORDER BY venueDeviceImage.venueDeviceImageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_VenueDeviceImage.venueDeviceImageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.VenueDeviceImage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.VenueDeviceImage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.VenueDeviceImage"),
			true);
	public static long ASPECTRATIO_COLUMN_BITMASK = 1L;
	public static long DEVICETYPE_COLUMN_BITMASK = 2L;
	public static long VENUEDETAILIMAGEID_COLUMN_BITMASK = 4L;
	public static long VENUEID_COLUMN_BITMASK = 8L;
	public static long VENUEDEVICEIMAGEID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VenueDeviceImage toModel(VenueDeviceImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VenueDeviceImage model = new VenueDeviceImageImpl();

		model.setVenueDeviceImageId(soapModel.getVenueDeviceImageId());
		model.setVenueDetailImageId(soapModel.getVenueDetailImageId());
		model.setVenueId(soapModel.getVenueId());
		model.setDeviceType(soapModel.getDeviceType());
		model.setVenueDeviceImageUUID(soapModel.getVenueDeviceImageUUID());
		model.setAspectRatio(soapModel.getAspectRatio());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VenueDeviceImage> toModels(
		VenueDeviceImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VenueDeviceImage> models = new ArrayList<VenueDeviceImage>(soapModels.length);

		for (VenueDeviceImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.VenueDeviceImage"));

	public VenueDeviceImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _venueDeviceImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVenueDeviceImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _venueDeviceImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VenueDeviceImage.class;
	}

	@Override
	public String getModelClassName() {
		return VenueDeviceImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("venueDeviceImageId", getVenueDeviceImageId());
		attributes.put("venueDetailImageId", getVenueDetailImageId());
		attributes.put("venueId", getVenueId());
		attributes.put("deviceType", getDeviceType());
		attributes.put("venueDeviceImageUUID", getVenueDeviceImageUUID());
		attributes.put("aspectRatio", getAspectRatio());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long venueDeviceImageId = (Long)attributes.get("venueDeviceImageId");

		if (venueDeviceImageId != null) {
			setVenueDeviceImageId(venueDeviceImageId);
		}

		Long venueDetailImageId = (Long)attributes.get("venueDetailImageId");

		if (venueDetailImageId != null) {
			setVenueDetailImageId(venueDetailImageId);
		}

		Long venueId = (Long)attributes.get("venueId");

		if (venueId != null) {
			setVenueId(venueId);
		}

		String deviceType = (String)attributes.get("deviceType");

		if (deviceType != null) {
			setDeviceType(deviceType);
		}

		String venueDeviceImageUUID = (String)attributes.get(
				"venueDeviceImageUUID");

		if (venueDeviceImageUUID != null) {
			setVenueDeviceImageUUID(venueDeviceImageUUID);
		}

		String aspectRatio = (String)attributes.get("aspectRatio");

		if (aspectRatio != null) {
			setAspectRatio(aspectRatio);
		}
	}

	@JSON
	@Override
	public long getVenueDeviceImageId() {
		return _venueDeviceImageId;
	}

	@Override
	public void setVenueDeviceImageId(long venueDeviceImageId) {
		_venueDeviceImageId = venueDeviceImageId;
	}

	@JSON
	@Override
	public long getVenueDetailImageId() {
		return _venueDetailImageId;
	}

	@Override
	public void setVenueDetailImageId(long venueDetailImageId) {
		_columnBitmask |= VENUEDETAILIMAGEID_COLUMN_BITMASK;

		if (!_setOriginalVenueDetailImageId) {
			_setOriginalVenueDetailImageId = true;

			_originalVenueDetailImageId = _venueDetailImageId;
		}

		_venueDetailImageId = venueDetailImageId;
	}

	public long getOriginalVenueDetailImageId() {
		return _originalVenueDetailImageId;
	}

	@JSON
	@Override
	public long getVenueId() {
		return _venueId;
	}

	@Override
	public void setVenueId(long venueId) {
		_columnBitmask |= VENUEID_COLUMN_BITMASK;

		if (!_setOriginalVenueId) {
			_setOriginalVenueId = true;

			_originalVenueId = _venueId;
		}

		_venueId = venueId;
	}

	public long getOriginalVenueId() {
		return _originalVenueId;
	}

	@JSON
	@Override
	public String getDeviceType() {
		if (_deviceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceType;
		}
	}

	@Override
	public void setDeviceType(String deviceType) {
		_columnBitmask |= DEVICETYPE_COLUMN_BITMASK;

		if (_originalDeviceType == null) {
			_originalDeviceType = _deviceType;
		}

		_deviceType = deviceType;
	}

	public String getOriginalDeviceType() {
		return GetterUtil.getString(_originalDeviceType);
	}

	@JSON
	@Override
	public String getVenueDeviceImageUUID() {
		if (_venueDeviceImageUUID == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDeviceImageUUID;
		}
	}

	@Override
	public void setVenueDeviceImageUUID(String venueDeviceImageUUID) {
		_venueDeviceImageUUID = venueDeviceImageUUID;
	}

	@JSON
	@Override
	public String getAspectRatio() {
		if (_aspectRatio == null) {
			return StringPool.BLANK;
		}
		else {
			return _aspectRatio;
		}
	}

	@Override
	public void setAspectRatio(String aspectRatio) {
		_columnBitmask |= ASPECTRATIO_COLUMN_BITMASK;

		if (_originalAspectRatio == null) {
			_originalAspectRatio = _aspectRatio;
		}

		_aspectRatio = aspectRatio;
	}

	public String getOriginalAspectRatio() {
		return GetterUtil.getString(_originalAspectRatio);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VenueDeviceImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VenueDeviceImage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VenueDeviceImage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VenueDeviceImageImpl venueDeviceImageImpl = new VenueDeviceImageImpl();

		venueDeviceImageImpl.setVenueDeviceImageId(getVenueDeviceImageId());
		venueDeviceImageImpl.setVenueDetailImageId(getVenueDetailImageId());
		venueDeviceImageImpl.setVenueId(getVenueId());
		venueDeviceImageImpl.setDeviceType(getDeviceType());
		venueDeviceImageImpl.setVenueDeviceImageUUID(getVenueDeviceImageUUID());
		venueDeviceImageImpl.setAspectRatio(getAspectRatio());

		venueDeviceImageImpl.resetOriginalValues();

		return venueDeviceImageImpl;
	}

	@Override
	public int compareTo(VenueDeviceImage venueDeviceImage) {
		long primaryKey = venueDeviceImage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VenueDeviceImage)) {
			return false;
		}

		VenueDeviceImage venueDeviceImage = (VenueDeviceImage)obj;

		long primaryKey = venueDeviceImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VenueDeviceImageModelImpl venueDeviceImageModelImpl = this;

		venueDeviceImageModelImpl._originalVenueDetailImageId = venueDeviceImageModelImpl._venueDetailImageId;

		venueDeviceImageModelImpl._setOriginalVenueDetailImageId = false;

		venueDeviceImageModelImpl._originalVenueId = venueDeviceImageModelImpl._venueId;

		venueDeviceImageModelImpl._setOriginalVenueId = false;

		venueDeviceImageModelImpl._originalDeviceType = venueDeviceImageModelImpl._deviceType;

		venueDeviceImageModelImpl._originalAspectRatio = venueDeviceImageModelImpl._aspectRatio;

		venueDeviceImageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VenueDeviceImage> toCacheModel() {
		VenueDeviceImageCacheModel venueDeviceImageCacheModel = new VenueDeviceImageCacheModel();

		venueDeviceImageCacheModel.venueDeviceImageId = getVenueDeviceImageId();

		venueDeviceImageCacheModel.venueDetailImageId = getVenueDetailImageId();

		venueDeviceImageCacheModel.venueId = getVenueId();

		venueDeviceImageCacheModel.deviceType = getDeviceType();

		String deviceType = venueDeviceImageCacheModel.deviceType;

		if ((deviceType != null) && (deviceType.length() == 0)) {
			venueDeviceImageCacheModel.deviceType = null;
		}

		venueDeviceImageCacheModel.venueDeviceImageUUID = getVenueDeviceImageUUID();

		String venueDeviceImageUUID = venueDeviceImageCacheModel.venueDeviceImageUUID;

		if ((venueDeviceImageUUID != null) &&
				(venueDeviceImageUUID.length() == 0)) {
			venueDeviceImageCacheModel.venueDeviceImageUUID = null;
		}

		venueDeviceImageCacheModel.aspectRatio = getAspectRatio();

		String aspectRatio = venueDeviceImageCacheModel.aspectRatio;

		if ((aspectRatio != null) && (aspectRatio.length() == 0)) {
			venueDeviceImageCacheModel.aspectRatio = null;
		}

		return venueDeviceImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{venueDeviceImageId=");
		sb.append(getVenueDeviceImageId());
		sb.append(", venueDetailImageId=");
		sb.append(getVenueDetailImageId());
		sb.append(", venueId=");
		sb.append(getVenueId());
		sb.append(", deviceType=");
		sb.append(getDeviceType());
		sb.append(", venueDeviceImageUUID=");
		sb.append(getVenueDeviceImageUUID());
		sb.append(", aspectRatio=");
		sb.append(getAspectRatio());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.VenueDeviceImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>venueDeviceImageId</column-name><column-value><![CDATA[");
		sb.append(getVenueDeviceImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDetailImageId</column-name><column-value><![CDATA[");
		sb.append(getVenueDetailImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueId</column-name><column-value><![CDATA[");
		sb.append(getVenueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceType</column-name><column-value><![CDATA[");
		sb.append(getDeviceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDeviceImageUUID</column-name><column-value><![CDATA[");
		sb.append(getVenueDeviceImageUUID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aspectRatio</column-name><column-value><![CDATA[");
		sb.append(getAspectRatio());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VenueDeviceImage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VenueDeviceImage.class
		};
	private long _venueDeviceImageId;
	private long _venueDetailImageId;
	private long _originalVenueDetailImageId;
	private boolean _setOriginalVenueDetailImageId;
	private long _venueId;
	private long _originalVenueId;
	private boolean _setOriginalVenueId;
	private String _deviceType;
	private String _originalDeviceType;
	private String _venueDeviceImageUUID;
	private String _aspectRatio;
	private String _originalAspectRatio;
	private long _columnBitmask;
	private VenueDeviceImage _escapedModel;
}