/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.EventSubDetail;
import com.rumbasolutions.flask.model.EventSubDetailModel;
import com.rumbasolutions.flask.model.EventSubDetailSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventSubDetail service. Represents a row in the &quot;flaskevents_EventSubDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.EventSubDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventSubDetailImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see EventSubDetailImpl
 * @see com.rumbasolutions.flask.model.EventSubDetail
 * @see com.rumbasolutions.flask.model.EventSubDetailModel
 * @generated
 */
@JSON(strict = true)
public class EventSubDetailModelImpl extends BaseModelImpl<EventSubDetail>
	implements EventSubDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event sub detail model instance should use the {@link com.rumbasolutions.flask.model.EventSubDetail} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_EventSubDetail";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventSubDetailId", Types.BIGINT },
			{ "eventDetailId", Types.BIGINT },
			{ "eventSubDetailTitle", Types.VARCHAR },
			{ "eventSubDetailDesc", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_EventSubDetail (eventSubDetailId LONG not null primary key,eventDetailId LONG,eventSubDetailTitle VARCHAR(75) null,eventSubDetailDesc VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_EventSubDetail";
	public static final String ORDER_BY_JPQL = " ORDER BY eventSubDetail.eventSubDetailId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_EventSubDetail.eventSubDetailId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.EventSubDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.EventSubDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.EventSubDetail"),
			true);
	public static long EVENTDETAILID_COLUMN_BITMASK = 1L;
	public static long EVENTSUBDETAILID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventSubDetail toModel(EventSubDetailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventSubDetail model = new EventSubDetailImpl();

		model.setEventSubDetailId(soapModel.getEventSubDetailId());
		model.setEventDetailId(soapModel.getEventDetailId());
		model.setEventSubDetailTitle(soapModel.getEventSubDetailTitle());
		model.setEventSubDetailDesc(soapModel.getEventSubDetailDesc());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventSubDetail> toModels(EventSubDetailSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventSubDetail> models = new ArrayList<EventSubDetail>(soapModels.length);

		for (EventSubDetailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.EventSubDetail"));

	public EventSubDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventSubDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventSubDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventSubDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventSubDetail.class;
	}

	@Override
	public String getModelClassName() {
		return EventSubDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventSubDetailId", getEventSubDetailId());
		attributes.put("eventDetailId", getEventDetailId());
		attributes.put("eventSubDetailTitle", getEventSubDetailTitle());
		attributes.put("eventSubDetailDesc", getEventSubDetailDesc());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventSubDetailId = (Long)attributes.get("eventSubDetailId");

		if (eventSubDetailId != null) {
			setEventSubDetailId(eventSubDetailId);
		}

		Long eventDetailId = (Long)attributes.get("eventDetailId");

		if (eventDetailId != null) {
			setEventDetailId(eventDetailId);
		}

		String eventSubDetailTitle = (String)attributes.get(
				"eventSubDetailTitle");

		if (eventSubDetailTitle != null) {
			setEventSubDetailTitle(eventSubDetailTitle);
		}

		String eventSubDetailDesc = (String)attributes.get("eventSubDetailDesc");

		if (eventSubDetailDesc != null) {
			setEventSubDetailDesc(eventSubDetailDesc);
		}
	}

	@JSON
	@Override
	public long getEventSubDetailId() {
		return _eventSubDetailId;
	}

	@Override
	public void setEventSubDetailId(long eventSubDetailId) {
		_eventSubDetailId = eventSubDetailId;
	}

	@JSON
	@Override
	public long getEventDetailId() {
		return _eventDetailId;
	}

	@Override
	public void setEventDetailId(long eventDetailId) {
		_columnBitmask |= EVENTDETAILID_COLUMN_BITMASK;

		if (!_setOriginalEventDetailId) {
			_setOriginalEventDetailId = true;

			_originalEventDetailId = _eventDetailId;
		}

		_eventDetailId = eventDetailId;
	}

	public long getOriginalEventDetailId() {
		return _originalEventDetailId;
	}

	@JSON
	@Override
	public String getEventSubDetailTitle() {
		if (_eventSubDetailTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventSubDetailTitle;
		}
	}

	@Override
	public void setEventSubDetailTitle(String eventSubDetailTitle) {
		_eventSubDetailTitle = eventSubDetailTitle;
	}

	@JSON
	@Override
	public String getEventSubDetailDesc() {
		if (_eventSubDetailDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventSubDetailDesc;
		}
	}

	@Override
	public void setEventSubDetailDesc(String eventSubDetailDesc) {
		_eventSubDetailDesc = eventSubDetailDesc;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EventSubDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventSubDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EventSubDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventSubDetailImpl eventSubDetailImpl = new EventSubDetailImpl();

		eventSubDetailImpl.setEventSubDetailId(getEventSubDetailId());
		eventSubDetailImpl.setEventDetailId(getEventDetailId());
		eventSubDetailImpl.setEventSubDetailTitle(getEventSubDetailTitle());
		eventSubDetailImpl.setEventSubDetailDesc(getEventSubDetailDesc());

		eventSubDetailImpl.resetOriginalValues();

		return eventSubDetailImpl;
	}

	@Override
	public int compareTo(EventSubDetail eventSubDetail) {
		long primaryKey = eventSubDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventSubDetail)) {
			return false;
		}

		EventSubDetail eventSubDetail = (EventSubDetail)obj;

		long primaryKey = eventSubDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventSubDetailModelImpl eventSubDetailModelImpl = this;

		eventSubDetailModelImpl._originalEventDetailId = eventSubDetailModelImpl._eventDetailId;

		eventSubDetailModelImpl._setOriginalEventDetailId = false;

		eventSubDetailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventSubDetail> toCacheModel() {
		EventSubDetailCacheModel eventSubDetailCacheModel = new EventSubDetailCacheModel();

		eventSubDetailCacheModel.eventSubDetailId = getEventSubDetailId();

		eventSubDetailCacheModel.eventDetailId = getEventDetailId();

		eventSubDetailCacheModel.eventSubDetailTitle = getEventSubDetailTitle();

		String eventSubDetailTitle = eventSubDetailCacheModel.eventSubDetailTitle;

		if ((eventSubDetailTitle != null) &&
				(eventSubDetailTitle.length() == 0)) {
			eventSubDetailCacheModel.eventSubDetailTitle = null;
		}

		eventSubDetailCacheModel.eventSubDetailDesc = getEventSubDetailDesc();

		String eventSubDetailDesc = eventSubDetailCacheModel.eventSubDetailDesc;

		if ((eventSubDetailDesc != null) && (eventSubDetailDesc.length() == 0)) {
			eventSubDetailCacheModel.eventSubDetailDesc = null;
		}

		return eventSubDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{eventSubDetailId=");
		sb.append(getEventSubDetailId());
		sb.append(", eventDetailId=");
		sb.append(getEventDetailId());
		sb.append(", eventSubDetailTitle=");
		sb.append(getEventSubDetailTitle());
		sb.append(", eventSubDetailDesc=");
		sb.append(getEventSubDetailDesc());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.EventSubDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventSubDetailId</column-name><column-value><![CDATA[");
		sb.append(getEventSubDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventDetailId</column-name><column-value><![CDATA[");
		sb.append(getEventDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventSubDetailTitle</column-name><column-value><![CDATA[");
		sb.append(getEventSubDetailTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventSubDetailDesc</column-name><column-value><![CDATA[");
		sb.append(getEventSubDetailDesc());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventSubDetail.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EventSubDetail.class
		};
	private long _eventSubDetailId;
	private long _eventDetailId;
	private long _originalEventDetailId;
	private boolean _setOriginalEventDetailId;
	private String _eventSubDetailTitle;
	private String _eventSubDetailDesc;
	private long _columnBitmask;
	private EventSubDetail _escapedModel;
}