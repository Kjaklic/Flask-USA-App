/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.EventType;
import com.rumbasolutions.flask.model.EventTypeModel;
import com.rumbasolutions.flask.model.EventTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventType service. Represents a row in the &quot;flaskevents_EventType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.EventTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventTypeImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see EventTypeImpl
 * @see com.rumbasolutions.flask.model.EventType
 * @see com.rumbasolutions.flask.model.EventTypeModel
 * @generated
 */
@JSON(strict = true)
public class EventTypeModelImpl extends BaseModelImpl<EventType>
	implements EventTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event type model instance should use the {@link com.rumbasolutions.flask.model.EventType} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_EventType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventTypeId", Types.BIGINT },
			{ "eventTypeKey", Types.VARCHAR },
			{ "eventTypeName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_EventType (eventTypeId LONG not null primary key,eventTypeKey VARCHAR(75) null,eventTypeName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_EventType";
	public static final String ORDER_BY_JPQL = " ORDER BY eventType.eventTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_EventType.eventTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.EventType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.EventType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventType toModel(EventTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventType model = new EventTypeImpl();

		model.setEventTypeId(soapModel.getEventTypeId());
		model.setEventTypeKey(soapModel.getEventTypeKey());
		model.setEventTypeName(soapModel.getEventTypeName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventType> toModels(EventTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventType> models = new ArrayList<EventType>(soapModels.length);

		for (EventTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.EventType"));

	public EventTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventType.class;
	}

	@Override
	public String getModelClassName() {
		return EventType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventTypeId", getEventTypeId());
		attributes.put("eventTypeKey", getEventTypeKey());
		attributes.put("eventTypeName", getEventTypeName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventTypeId = (Long)attributes.get("eventTypeId");

		if (eventTypeId != null) {
			setEventTypeId(eventTypeId);
		}

		String eventTypeKey = (String)attributes.get("eventTypeKey");

		if (eventTypeKey != null) {
			setEventTypeKey(eventTypeKey);
		}

		String eventTypeName = (String)attributes.get("eventTypeName");

		if (eventTypeName != null) {
			setEventTypeName(eventTypeName);
		}
	}

	@JSON
	@Override
	public long getEventTypeId() {
		return _eventTypeId;
	}

	@Override
	public void setEventTypeId(long eventTypeId) {
		_eventTypeId = eventTypeId;
	}

	@JSON
	@Override
	public String getEventTypeKey() {
		if (_eventTypeKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventTypeKey;
		}
	}

	@Override
	public void setEventTypeKey(String eventTypeKey) {
		_eventTypeKey = eventTypeKey;
	}

	@JSON
	@Override
	public String getEventTypeName() {
		if (_eventTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventTypeName;
		}
	}

	@Override
	public void setEventTypeName(String eventTypeName) {
		_eventTypeName = eventTypeName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EventType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EventType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventTypeImpl eventTypeImpl = new EventTypeImpl();

		eventTypeImpl.setEventTypeId(getEventTypeId());
		eventTypeImpl.setEventTypeKey(getEventTypeKey());
		eventTypeImpl.setEventTypeName(getEventTypeName());

		eventTypeImpl.resetOriginalValues();

		return eventTypeImpl;
	}

	@Override
	public int compareTo(EventType eventType) {
		long primaryKey = eventType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventType)) {
			return false;
		}

		EventType eventType = (EventType)obj;

		long primaryKey = eventType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EventType> toCacheModel() {
		EventTypeCacheModel eventTypeCacheModel = new EventTypeCacheModel();

		eventTypeCacheModel.eventTypeId = getEventTypeId();

		eventTypeCacheModel.eventTypeKey = getEventTypeKey();

		String eventTypeKey = eventTypeCacheModel.eventTypeKey;

		if ((eventTypeKey != null) && (eventTypeKey.length() == 0)) {
			eventTypeCacheModel.eventTypeKey = null;
		}

		eventTypeCacheModel.eventTypeName = getEventTypeName();

		String eventTypeName = eventTypeCacheModel.eventTypeName;

		if ((eventTypeName != null) && (eventTypeName.length() == 0)) {
			eventTypeCacheModel.eventTypeName = null;
		}

		return eventTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{eventTypeId=");
		sb.append(getEventTypeId());
		sb.append(", eventTypeKey=");
		sb.append(getEventTypeKey());
		sb.append(", eventTypeName=");
		sb.append(getEventTypeName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.EventType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventTypeId</column-name><column-value><![CDATA[");
		sb.append(getEventTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventTypeKey</column-name><column-value><![CDATA[");
		sb.append(getEventTypeKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventTypeName</column-name><column-value><![CDATA[");
		sb.append(getEventTypeName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EventType.class
		};
	private long _eventTypeId;
	private String _eventTypeKey;
	private String _eventTypeName;
	private EventType _escapedModel;
}