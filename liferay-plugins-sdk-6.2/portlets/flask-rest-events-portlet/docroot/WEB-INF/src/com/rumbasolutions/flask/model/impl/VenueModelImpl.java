/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.Venue;
import com.rumbasolutions.flask.model.VenueModel;
import com.rumbasolutions.flask.model.VenueSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Venue service. Represents a row in the &quot;flaskevents_Venue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.VenueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VenueImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see VenueImpl
 * @see com.rumbasolutions.flask.model.Venue
 * @see com.rumbasolutions.flask.model.VenueModel
 * @generated
 */
@JSON(strict = true)
public class VenueModelImpl extends BaseModelImpl<Venue> implements VenueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a venue model instance should use the {@link com.rumbasolutions.flask.model.Venue} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_Venue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "venueId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "venueName", Types.VARCHAR },
			{ "venueDescription", Types.VARCHAR },
			{ "venueZipCode", Types.VARCHAR },
			{ "addrLine1", Types.VARCHAR },
			{ "addrLine2", Types.VARCHAR },
			{ "venueCity", Types.VARCHAR },
			{ "venueStateId", Types.BIGINT },
			{ "venueStateName", Types.VARCHAR },
			{ "venueCountryId", Types.BIGINT },
			{ "venueCountryName", Types.VARCHAR },
			{ "venueMetroArea", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_Venue (venueId LONG not null primary key,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null,venueName VARCHAR(100) null,venueDescription VARCHAR(255) null,venueZipCode VARCHAR(20) null,addrLine1 VARCHAR(100) null,addrLine2 VARCHAR(100) null,venueCity VARCHAR(100) null,venueStateId LONG,venueStateName VARCHAR(75) null,venueCountryId LONG,venueCountryName VARCHAR(75) null,venueMetroArea VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_Venue";
	public static final String ORDER_BY_JPQL = " ORDER BY venue.venueName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_Venue.venueName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.Venue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.Venue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.Venue"),
			true);
	public static long VENUEMETROAREA_COLUMN_BITMASK = 1L;
	public static long VENUEZIPCODE_COLUMN_BITMASK = 2L;
	public static long VENUENAME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Venue toModel(VenueSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Venue model = new VenueImpl();

		model.setVenueId(soapModel.getVenueId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setVenueName(soapModel.getVenueName());
		model.setVenueDescription(soapModel.getVenueDescription());
		model.setVenueZipCode(soapModel.getVenueZipCode());
		model.setAddrLine1(soapModel.getAddrLine1());
		model.setAddrLine2(soapModel.getAddrLine2());
		model.setVenueCity(soapModel.getVenueCity());
		model.setVenueStateId(soapModel.getVenueStateId());
		model.setVenueStateName(soapModel.getVenueStateName());
		model.setVenueCountryId(soapModel.getVenueCountryId());
		model.setVenueCountryName(soapModel.getVenueCountryName());
		model.setVenueMetroArea(soapModel.getVenueMetroArea());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Venue> toModels(VenueSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Venue> models = new ArrayList<Venue>(soapModels.length);

		for (VenueSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.Venue"));

	public VenueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _venueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVenueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _venueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Venue.class;
	}

	@Override
	public String getModelClassName() {
		return Venue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("venueId", getVenueId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("venueName", getVenueName());
		attributes.put("venueDescription", getVenueDescription());
		attributes.put("venueZipCode", getVenueZipCode());
		attributes.put("addrLine1", getAddrLine1());
		attributes.put("addrLine2", getAddrLine2());
		attributes.put("venueCity", getVenueCity());
		attributes.put("venueStateId", getVenueStateId());
		attributes.put("venueStateName", getVenueStateName());
		attributes.put("venueCountryId", getVenueCountryId());
		attributes.put("venueCountryName", getVenueCountryName());
		attributes.put("venueMetroArea", getVenueMetroArea());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long venueId = (Long)attributes.get("venueId");

		if (venueId != null) {
			setVenueId(venueId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String venueName = (String)attributes.get("venueName");

		if (venueName != null) {
			setVenueName(venueName);
		}

		String venueDescription = (String)attributes.get("venueDescription");

		if (venueDescription != null) {
			setVenueDescription(venueDescription);
		}

		String venueZipCode = (String)attributes.get("venueZipCode");

		if (venueZipCode != null) {
			setVenueZipCode(venueZipCode);
		}

		String addrLine1 = (String)attributes.get("addrLine1");

		if (addrLine1 != null) {
			setAddrLine1(addrLine1);
		}

		String addrLine2 = (String)attributes.get("addrLine2");

		if (addrLine2 != null) {
			setAddrLine2(addrLine2);
		}

		String venueCity = (String)attributes.get("venueCity");

		if (venueCity != null) {
			setVenueCity(venueCity);
		}

		Long venueStateId = (Long)attributes.get("venueStateId");

		if (venueStateId != null) {
			setVenueStateId(venueStateId);
		}

		String venueStateName = (String)attributes.get("venueStateName");

		if (venueStateName != null) {
			setVenueStateName(venueStateName);
		}

		Long venueCountryId = (Long)attributes.get("venueCountryId");

		if (venueCountryId != null) {
			setVenueCountryId(venueCountryId);
		}

		String venueCountryName = (String)attributes.get("venueCountryName");

		if (venueCountryName != null) {
			setVenueCountryName(venueCountryName);
		}

		String venueMetroArea = (String)attributes.get("venueMetroArea");

		if (venueMetroArea != null) {
			setVenueMetroArea(venueMetroArea);
		}
	}

	@JSON
	@Override
	public long getVenueId() {
		return _venueId;
	}

	@Override
	public void setVenueId(long venueId) {
		_venueId = venueId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getVenueName() {
		if (_venueName == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueName;
		}
	}

	@Override
	public void setVenueName(String venueName) {
		_columnBitmask = -1L;

		_venueName = venueName;
	}

	@JSON
	@Override
	public String getVenueDescription() {
		if (_venueDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueDescription;
		}
	}

	@Override
	public void setVenueDescription(String venueDescription) {
		_venueDescription = venueDescription;
	}

	@JSON
	@Override
	public String getVenueZipCode() {
		if (_venueZipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueZipCode;
		}
	}

	@Override
	public void setVenueZipCode(String venueZipCode) {
		_columnBitmask |= VENUEZIPCODE_COLUMN_BITMASK;

		if (_originalVenueZipCode == null) {
			_originalVenueZipCode = _venueZipCode;
		}

		_venueZipCode = venueZipCode;
	}

	public String getOriginalVenueZipCode() {
		return GetterUtil.getString(_originalVenueZipCode);
	}

	@JSON
	@Override
	public String getAddrLine1() {
		if (_addrLine1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _addrLine1;
		}
	}

	@Override
	public void setAddrLine1(String addrLine1) {
		_addrLine1 = addrLine1;
	}

	@JSON
	@Override
	public String getAddrLine2() {
		if (_addrLine2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _addrLine2;
		}
	}

	@Override
	public void setAddrLine2(String addrLine2) {
		_addrLine2 = addrLine2;
	}

	@JSON
	@Override
	public String getVenueCity() {
		if (_venueCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueCity;
		}
	}

	@Override
	public void setVenueCity(String venueCity) {
		_venueCity = venueCity;
	}

	@JSON
	@Override
	public long getVenueStateId() {
		return _venueStateId;
	}

	@Override
	public void setVenueStateId(long venueStateId) {
		_venueStateId = venueStateId;
	}

	@JSON
	@Override
	public String getVenueStateName() {
		if (_venueStateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueStateName;
		}
	}

	@Override
	public void setVenueStateName(String venueStateName) {
		_venueStateName = venueStateName;
	}

	@JSON
	@Override
	public long getVenueCountryId() {
		return _venueCountryId;
	}

	@Override
	public void setVenueCountryId(long venueCountryId) {
		_venueCountryId = venueCountryId;
	}

	@JSON
	@Override
	public String getVenueCountryName() {
		if (_venueCountryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueCountryName;
		}
	}

	@Override
	public void setVenueCountryName(String venueCountryName) {
		_venueCountryName = venueCountryName;
	}

	@JSON
	@Override
	public String getVenueMetroArea() {
		if (_venueMetroArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _venueMetroArea;
		}
	}

	@Override
	public void setVenueMetroArea(String venueMetroArea) {
		_columnBitmask |= VENUEMETROAREA_COLUMN_BITMASK;

		if (_originalVenueMetroArea == null) {
			_originalVenueMetroArea = _venueMetroArea;
		}

		_venueMetroArea = venueMetroArea;
	}

	public String getOriginalVenueMetroArea() {
		return GetterUtil.getString(_originalVenueMetroArea);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Venue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Venue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Venue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VenueImpl venueImpl = new VenueImpl();

		venueImpl.setVenueId(getVenueId());
		venueImpl.setCompanyId(getCompanyId());
		venueImpl.setUserId(getUserId());
		venueImpl.setCreatedDate(getCreatedDate());
		venueImpl.setModifiedDate(getModifiedDate());
		venueImpl.setVenueName(getVenueName());
		venueImpl.setVenueDescription(getVenueDescription());
		venueImpl.setVenueZipCode(getVenueZipCode());
		venueImpl.setAddrLine1(getAddrLine1());
		venueImpl.setAddrLine2(getAddrLine2());
		venueImpl.setVenueCity(getVenueCity());
		venueImpl.setVenueStateId(getVenueStateId());
		venueImpl.setVenueStateName(getVenueStateName());
		venueImpl.setVenueCountryId(getVenueCountryId());
		venueImpl.setVenueCountryName(getVenueCountryName());
		venueImpl.setVenueMetroArea(getVenueMetroArea());

		venueImpl.resetOriginalValues();

		return venueImpl;
	}

	@Override
	public int compareTo(Venue venue) {
		int value = 0;

		value = getVenueName().compareTo(venue.getVenueName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Venue)) {
			return false;
		}

		Venue venue = (Venue)obj;

		long primaryKey = venue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VenueModelImpl venueModelImpl = this;

		venueModelImpl._originalVenueZipCode = venueModelImpl._venueZipCode;

		venueModelImpl._originalVenueMetroArea = venueModelImpl._venueMetroArea;

		venueModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Venue> toCacheModel() {
		VenueCacheModel venueCacheModel = new VenueCacheModel();

		venueCacheModel.venueId = getVenueId();

		venueCacheModel.companyId = getCompanyId();

		venueCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			venueCacheModel.createdDate = createdDate.getTime();
		}
		else {
			venueCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			venueCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			venueCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		venueCacheModel.venueName = getVenueName();

		String venueName = venueCacheModel.venueName;

		if ((venueName != null) && (venueName.length() == 0)) {
			venueCacheModel.venueName = null;
		}

		venueCacheModel.venueDescription = getVenueDescription();

		String venueDescription = venueCacheModel.venueDescription;

		if ((venueDescription != null) && (venueDescription.length() == 0)) {
			venueCacheModel.venueDescription = null;
		}

		venueCacheModel.venueZipCode = getVenueZipCode();

		String venueZipCode = venueCacheModel.venueZipCode;

		if ((venueZipCode != null) && (venueZipCode.length() == 0)) {
			venueCacheModel.venueZipCode = null;
		}

		venueCacheModel.addrLine1 = getAddrLine1();

		String addrLine1 = venueCacheModel.addrLine1;

		if ((addrLine1 != null) && (addrLine1.length() == 0)) {
			venueCacheModel.addrLine1 = null;
		}

		venueCacheModel.addrLine2 = getAddrLine2();

		String addrLine2 = venueCacheModel.addrLine2;

		if ((addrLine2 != null) && (addrLine2.length() == 0)) {
			venueCacheModel.addrLine2 = null;
		}

		venueCacheModel.venueCity = getVenueCity();

		String venueCity = venueCacheModel.venueCity;

		if ((venueCity != null) && (venueCity.length() == 0)) {
			venueCacheModel.venueCity = null;
		}

		venueCacheModel.venueStateId = getVenueStateId();

		venueCacheModel.venueStateName = getVenueStateName();

		String venueStateName = venueCacheModel.venueStateName;

		if ((venueStateName != null) && (venueStateName.length() == 0)) {
			venueCacheModel.venueStateName = null;
		}

		venueCacheModel.venueCountryId = getVenueCountryId();

		venueCacheModel.venueCountryName = getVenueCountryName();

		String venueCountryName = venueCacheModel.venueCountryName;

		if ((venueCountryName != null) && (venueCountryName.length() == 0)) {
			venueCacheModel.venueCountryName = null;
		}

		venueCacheModel.venueMetroArea = getVenueMetroArea();

		String venueMetroArea = venueCacheModel.venueMetroArea;

		if ((venueMetroArea != null) && (venueMetroArea.length() == 0)) {
			venueCacheModel.venueMetroArea = null;
		}

		return venueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{venueId=");
		sb.append(getVenueId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", venueName=");
		sb.append(getVenueName());
		sb.append(", venueDescription=");
		sb.append(getVenueDescription());
		sb.append(", venueZipCode=");
		sb.append(getVenueZipCode());
		sb.append(", addrLine1=");
		sb.append(getAddrLine1());
		sb.append(", addrLine2=");
		sb.append(getAddrLine2());
		sb.append(", venueCity=");
		sb.append(getVenueCity());
		sb.append(", venueStateId=");
		sb.append(getVenueStateId());
		sb.append(", venueStateName=");
		sb.append(getVenueStateName());
		sb.append(", venueCountryId=");
		sb.append(getVenueCountryId());
		sb.append(", venueCountryName=");
		sb.append(getVenueCountryName());
		sb.append(", venueMetroArea=");
		sb.append(getVenueMetroArea());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.Venue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>venueId</column-name><column-value><![CDATA[");
		sb.append(getVenueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueName</column-name><column-value><![CDATA[");
		sb.append(getVenueName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueDescription</column-name><column-value><![CDATA[");
		sb.append(getVenueDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueZipCode</column-name><column-value><![CDATA[");
		sb.append(getVenueZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addrLine1</column-name><column-value><![CDATA[");
		sb.append(getAddrLine1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addrLine2</column-name><column-value><![CDATA[");
		sb.append(getAddrLine2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueCity</column-name><column-value><![CDATA[");
		sb.append(getVenueCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueStateId</column-name><column-value><![CDATA[");
		sb.append(getVenueStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueStateName</column-name><column-value><![CDATA[");
		sb.append(getVenueStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueCountryId</column-name><column-value><![CDATA[");
		sb.append(getVenueCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueCountryName</column-name><column-value><![CDATA[");
		sb.append(getVenueCountryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>venueMetroArea</column-name><column-value><![CDATA[");
		sb.append(getVenueMetroArea());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Venue.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Venue.class };
	private long _venueId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createdDate;
	private Date _modifiedDate;
	private String _venueName;
	private String _venueDescription;
	private String _venueZipCode;
	private String _originalVenueZipCode;
	private String _addrLine1;
	private String _addrLine2;
	private String _venueCity;
	private long _venueStateId;
	private String _venueStateName;
	private long _venueCountryId;
	private String _venueCountryName;
	private String _venueMetroArea;
	private String _originalVenueMetroArea;
	private long _columnBitmask;
	private Venue _escapedModel;
}