/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.InfoType;
import com.rumbasolutions.flask.model.InfoTypeModel;
import com.rumbasolutions.flask.model.InfoTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InfoType service. Represents a row in the &quot;flaskevents_InfoType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.InfoTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InfoTypeImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see InfoTypeImpl
 * @see com.rumbasolutions.flask.model.InfoType
 * @see com.rumbasolutions.flask.model.InfoTypeModel
 * @generated
 */
@JSON(strict = true)
public class InfoTypeModelImpl extends BaseModelImpl<InfoType>
	implements InfoTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a info type model instance should use the {@link com.rumbasolutions.flask.model.InfoType} interface instead.
	 */
	public static final String TABLE_NAME = "flaskevents_InfoType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "infoTypeId", Types.BIGINT },
			{ "infoTypeName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskevents_InfoType (infoTypeId LONG not null primary key,infoTypeName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskevents_InfoType";
	public static final String ORDER_BY_JPQL = " ORDER BY infoType.infoTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskevents_InfoType.infoTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.InfoType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.InfoType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InfoType toModel(InfoTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InfoType model = new InfoTypeImpl();

		model.setInfoTypeId(soapModel.getInfoTypeId());
		model.setInfoTypeName(soapModel.getInfoTypeName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InfoType> toModels(InfoTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InfoType> models = new ArrayList<InfoType>(soapModels.length);

		for (InfoTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.InfoType"));

	public InfoTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _infoTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInfoTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _infoTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InfoType.class;
	}

	@Override
	public String getModelClassName() {
		return InfoType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("infoTypeId", getInfoTypeId());
		attributes.put("infoTypeName", getInfoTypeName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long infoTypeId = (Long)attributes.get("infoTypeId");

		if (infoTypeId != null) {
			setInfoTypeId(infoTypeId);
		}

		String infoTypeName = (String)attributes.get("infoTypeName");

		if (infoTypeName != null) {
			setInfoTypeName(infoTypeName);
		}
	}

	@JSON
	@Override
	public long getInfoTypeId() {
		return _infoTypeId;
	}

	@Override
	public void setInfoTypeId(long infoTypeId) {
		_infoTypeId = infoTypeId;
	}

	@JSON
	@Override
	public String getInfoTypeName() {
		if (_infoTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _infoTypeName;
		}
	}

	@Override
	public void setInfoTypeName(String infoTypeName) {
		_infoTypeName = infoTypeName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InfoType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InfoType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InfoType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InfoTypeImpl infoTypeImpl = new InfoTypeImpl();

		infoTypeImpl.setInfoTypeId(getInfoTypeId());
		infoTypeImpl.setInfoTypeName(getInfoTypeName());

		infoTypeImpl.resetOriginalValues();

		return infoTypeImpl;
	}

	@Override
	public int compareTo(InfoType infoType) {
		long primaryKey = infoType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InfoType)) {
			return false;
		}

		InfoType infoType = (InfoType)obj;

		long primaryKey = infoType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<InfoType> toCacheModel() {
		InfoTypeCacheModel infoTypeCacheModel = new InfoTypeCacheModel();

		infoTypeCacheModel.infoTypeId = getInfoTypeId();

		infoTypeCacheModel.infoTypeName = getInfoTypeName();

		String infoTypeName = infoTypeCacheModel.infoTypeName;

		if ((infoTypeName != null) && (infoTypeName.length() == 0)) {
			infoTypeCacheModel.infoTypeName = null;
		}

		return infoTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{infoTypeId=");
		sb.append(getInfoTypeId());
		sb.append(", infoTypeName=");
		sb.append(getInfoTypeName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.InfoType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>infoTypeId</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoTypeName</column-name><column-value><![CDATA[");
		sb.append(getInfoTypeName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InfoType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InfoType.class
		};
	private long _infoTypeId;
	private String _infoTypeName;
	private InfoType _escapedModel;
}