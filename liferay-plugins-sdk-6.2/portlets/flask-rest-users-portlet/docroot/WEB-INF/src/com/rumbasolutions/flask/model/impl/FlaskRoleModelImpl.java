/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.FlaskRole;
import com.rumbasolutions.flask.model.FlaskRoleModel;
import com.rumbasolutions.flask.model.FlaskRoleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FlaskRole service. Represents a row in the &quot;flaskusers_FlaskRole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.FlaskRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlaskRoleImpl}.
 * </p>
 *
 * @author Ashutosh Rai
 * @see FlaskRoleImpl
 * @see com.rumbasolutions.flask.model.FlaskRole
 * @see com.rumbasolutions.flask.model.FlaskRoleModel
 * @generated
 */
@JSON(strict = true)
public class FlaskRoleModelImpl extends BaseModelImpl<FlaskRole>
	implements FlaskRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flask role model instance should use the {@link com.rumbasolutions.flask.model.FlaskRole} interface instead.
	 */
	public static final String TABLE_NAME = "flaskusers_FlaskRole";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roleId", Types.BIGINT },
			{ "roleName", Types.VARCHAR },
			{ "roleDesc", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskusers_FlaskRole (roleId LONG not null primary key,roleName VARCHAR(75) null,roleDesc VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskusers_FlaskRole";
	public static final String ORDER_BY_JPQL = " ORDER BY flaskRole.roleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskusers_FlaskRole.roleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.FlaskRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.FlaskRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FlaskRole toModel(FlaskRoleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FlaskRole model = new FlaskRoleImpl();

		model.setRoleId(soapModel.getRoleId());
		model.setRoleName(soapModel.getRoleName());
		model.setRoleDesc(soapModel.getRoleDesc());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FlaskRole> toModels(FlaskRoleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FlaskRole> models = new ArrayList<FlaskRole>(soapModels.length);

		for (FlaskRoleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.FlaskRole"));

	public FlaskRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FlaskRole.class;
	}

	@Override
	public String getModelClassName() {
		return FlaskRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roleId", getRoleId());
		attributes.put("roleName", getRoleName());
		attributes.put("roleDesc", getRoleDesc());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}

		String roleName = (String)attributes.get("roleName");

		if (roleName != null) {
			setRoleName(roleName);
		}

		String roleDesc = (String)attributes.get("roleDesc");

		if (roleDesc != null) {
			setRoleDesc(roleDesc);
		}
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_roleId = roleId;
	}

	@JSON
	@Override
	public String getRoleName() {
		if (_roleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _roleName;
		}
	}

	@Override
	public void setRoleName(String roleName) {
		_roleName = roleName;
	}

	@JSON
	@Override
	public String getRoleDesc() {
		if (_roleDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _roleDesc;
		}
	}

	@Override
	public void setRoleDesc(String roleDesc) {
		_roleDesc = roleDesc;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FlaskRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FlaskRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FlaskRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlaskRoleImpl flaskRoleImpl = new FlaskRoleImpl();

		flaskRoleImpl.setRoleId(getRoleId());
		flaskRoleImpl.setRoleName(getRoleName());
		flaskRoleImpl.setRoleDesc(getRoleDesc());

		flaskRoleImpl.resetOriginalValues();

		return flaskRoleImpl;
	}

	@Override
	public int compareTo(FlaskRole flaskRole) {
		long primaryKey = flaskRole.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FlaskRole)) {
			return false;
		}

		FlaskRole flaskRole = (FlaskRole)obj;

		long primaryKey = flaskRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FlaskRole> toCacheModel() {
		FlaskRoleCacheModel flaskRoleCacheModel = new FlaskRoleCacheModel();

		flaskRoleCacheModel.roleId = getRoleId();

		flaskRoleCacheModel.roleName = getRoleName();

		String roleName = flaskRoleCacheModel.roleName;

		if ((roleName != null) && (roleName.length() == 0)) {
			flaskRoleCacheModel.roleName = null;
		}

		flaskRoleCacheModel.roleDesc = getRoleDesc();

		String roleDesc = flaskRoleCacheModel.roleDesc;

		if ((roleDesc != null) && (roleDesc.length() == 0)) {
			flaskRoleCacheModel.roleDesc = null;
		}

		return flaskRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{roleId=");
		sb.append(getRoleId());
		sb.append(", roleName=");
		sb.append(getRoleName());
		sb.append(", roleDesc=");
		sb.append(getRoleDesc());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.FlaskRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleName</column-name><column-value><![CDATA[");
		sb.append(getRoleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleDesc</column-name><column-value><![CDATA[");
		sb.append(getRoleDesc());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FlaskRole.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FlaskRole.class
		};
	private long _roleId;
	private String _roleName;
	private String _roleDesc;
	private FlaskRole _escapedModel;
}