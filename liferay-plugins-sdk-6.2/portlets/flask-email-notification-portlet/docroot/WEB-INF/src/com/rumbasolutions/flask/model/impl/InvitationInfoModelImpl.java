/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.InvitationInfo;
import com.rumbasolutions.flask.model.InvitationInfoModel;
import com.rumbasolutions.flask.model.InvitationInfoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InvitationInfo service. Represents a row in the &quot;flaskinvitation_InvitationInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.InvitationInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvitationInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see InvitationInfoImpl
 * @see com.rumbasolutions.flask.model.InvitationInfo
 * @see com.rumbasolutions.flask.model.InvitationInfoModel
 * @generated
 */
@JSON(strict = true)
public class InvitationInfoModelImpl extends BaseModelImpl<InvitationInfo>
	implements InvitationInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a invitation info model instance should use the {@link com.rumbasolutions.flask.model.InvitationInfo} interface instead.
	 */
	public static final String TABLE_NAME = "flaskinvitation_InvitationInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "inviationId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "invitedDate", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskinvitation_InvitationInfo (inviationId LONG not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,description VARCHAR(75) null,invitedDate VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table flaskinvitation_InvitationInfo";
	public static final String ORDER_BY_JPQL = " ORDER BY invitationInfo.inviationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskinvitation_InvitationInfo.inviationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.InvitationInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.InvitationInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InvitationInfo toModel(InvitationInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InvitationInfo model = new InvitationInfoImpl();

		model.setInviationId(soapModel.getInviationId());
		model.setName(soapModel.getName());
		model.setEmail(soapModel.getEmail());
		model.setDescription(soapModel.getDescription());
		model.setInvitedDate(soapModel.getInvitedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InvitationInfo> toModels(InvitationInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InvitationInfo> models = new ArrayList<InvitationInfo>(soapModels.length);

		for (InvitationInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.InvitationInfo"));

	public InvitationInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _inviationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInviationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _inviationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InvitationInfo.class;
	}

	@Override
	public String getModelClassName() {
		return InvitationInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("inviationId", getInviationId());
		attributes.put("name", getName());
		attributes.put("email", getEmail());
		attributes.put("description", getDescription());
		attributes.put("invitedDate", getInvitedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long inviationId = (Long)attributes.get("inviationId");

		if (inviationId != null) {
			setInviationId(inviationId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String invitedDate = (String)attributes.get("invitedDate");

		if (invitedDate != null) {
			setInvitedDate(invitedDate);
		}
	}

	@JSON
	@Override
	public long getInviationId() {
		return _inviationId;
	}

	@Override
	public void setInviationId(long inviationId) {
		_inviationId = inviationId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getInvitedDate() {
		if (_invitedDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _invitedDate;
		}
	}

	@Override
	public void setInvitedDate(String invitedDate) {
		_invitedDate = invitedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InvitationInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InvitationInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InvitationInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InvitationInfoImpl invitationInfoImpl = new InvitationInfoImpl();

		invitationInfoImpl.setInviationId(getInviationId());
		invitationInfoImpl.setName(getName());
		invitationInfoImpl.setEmail(getEmail());
		invitationInfoImpl.setDescription(getDescription());
		invitationInfoImpl.setInvitedDate(getInvitedDate());

		invitationInfoImpl.resetOriginalValues();

		return invitationInfoImpl;
	}

	@Override
	public int compareTo(InvitationInfo invitationInfo) {
		long primaryKey = invitationInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InvitationInfo)) {
			return false;
		}

		InvitationInfo invitationInfo = (InvitationInfo)obj;

		long primaryKey = invitationInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<InvitationInfo> toCacheModel() {
		InvitationInfoCacheModel invitationInfoCacheModel = new InvitationInfoCacheModel();

		invitationInfoCacheModel.inviationId = getInviationId();

		invitationInfoCacheModel.name = getName();

		String name = invitationInfoCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			invitationInfoCacheModel.name = null;
		}

		invitationInfoCacheModel.email = getEmail();

		String email = invitationInfoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			invitationInfoCacheModel.email = null;
		}

		invitationInfoCacheModel.description = getDescription();

		String description = invitationInfoCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			invitationInfoCacheModel.description = null;
		}

		invitationInfoCacheModel.invitedDate = getInvitedDate();

		String invitedDate = invitationInfoCacheModel.invitedDate;

		if ((invitedDate != null) && (invitedDate.length() == 0)) {
			invitationInfoCacheModel.invitedDate = null;
		}

		return invitationInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{inviationId=");
		sb.append(getInviationId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", invitedDate=");
		sb.append(getInvitedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.InvitationInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>inviationId</column-name><column-value><![CDATA[");
		sb.append(getInviationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invitedDate</column-name><column-value><![CDATA[");
		sb.append(getInvitedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InvitationInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InvitationInfo.class
		};
	private long _inviationId;
	private String _name;
	private String _email;
	private String _description;
	private String _invitedDate;
	private InvitationInfo _escapedModel;
}