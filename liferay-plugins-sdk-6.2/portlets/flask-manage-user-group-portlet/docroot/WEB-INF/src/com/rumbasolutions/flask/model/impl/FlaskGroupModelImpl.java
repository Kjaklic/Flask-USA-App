/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.FlaskGroup;
import com.rumbasolutions.flask.model.FlaskGroupModel;
import com.rumbasolutions.flask.model.FlaskGroupSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FlaskGroup service. Represents a row in the &quot;flaskgroup_FlaskGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.FlaskGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlaskGroupImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FlaskGroupImpl
 * @see com.rumbasolutions.flask.model.FlaskGroup
 * @see com.rumbasolutions.flask.model.FlaskGroupModel
 * @generated
 */
@JSON(strict = true)
public class FlaskGroupModelImpl extends BaseModelImpl<FlaskGroup>
	implements FlaskGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flask group model instance should use the {@link com.rumbasolutions.flask.model.FlaskGroup} interface instead.
	 */
	public static final String TABLE_NAME = "flaskgroup_FlaskGroup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "groupId", Types.BIGINT },
			{ "groupName", Types.VARCHAR },
			{ "groupDescription", Types.VARCHAR },
			{ "createdDate", Types.VARCHAR },
			{ "createdBy", Types.VARCHAR },
			{ "isActive", Types.INTEGER },
			{ "isDelete", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table flaskgroup_FlaskGroup (groupId LONG not null primary key,groupName VARCHAR(75) null,groupDescription VARCHAR(75) null,createdDate VARCHAR(75) null,createdBy VARCHAR(75) null,isActive INTEGER,isDelete INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table flaskgroup_FlaskGroup";
	public static final String ORDER_BY_JPQL = " ORDER BY flaskGroup.groupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flaskgroup_FlaskGroup.groupId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.FlaskGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.FlaskGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FlaskGroup toModel(FlaskGroupSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FlaskGroup model = new FlaskGroupImpl();

		model.setGroupId(soapModel.getGroupId());
		model.setGroupName(soapModel.getGroupName());
		model.setGroupDescription(soapModel.getGroupDescription());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setIsActive(soapModel.getIsActive());
		model.setIsDelete(soapModel.getIsDelete());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FlaskGroup> toModels(FlaskGroupSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FlaskGroup> models = new ArrayList<FlaskGroup>(soapModels.length);

		for (FlaskGroupSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.FlaskGroup"));

	public FlaskGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _groupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _groupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FlaskGroup.class;
	}

	@Override
	public String getModelClassName() {
		return FlaskGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupId", getGroupId());
		attributes.put("groupName", getGroupName());
		attributes.put("groupDescription", getGroupDescription());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("isActive", getIsActive());
		attributes.put("isDelete", getIsDelete());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String groupName = (String)attributes.get("groupName");

		if (groupName != null) {
			setGroupName(groupName);
		}

		String groupDescription = (String)attributes.get("groupDescription");

		if (groupDescription != null) {
			setGroupDescription(groupDescription);
		}

		String createdDate = (String)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Integer isActive = (Integer)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_groupName = groupName;
	}

	@JSON
	@Override
	public String getGroupDescription() {
		if (_groupDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupDescription;
		}
	}

	@Override
	public void setGroupDescription(String groupDescription) {
		_groupDescription = groupDescription;
	}

	@JSON
	@Override
	public String getCreatedDate() {
		if (_createdDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdDate;
		}
	}

	@Override
	public void setCreatedDate(String createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public int getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(int isActive) {
		_isActive = isActive;
	}

	@JSON
	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FlaskGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FlaskGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FlaskGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlaskGroupImpl flaskGroupImpl = new FlaskGroupImpl();

		flaskGroupImpl.setGroupId(getGroupId());
		flaskGroupImpl.setGroupName(getGroupName());
		flaskGroupImpl.setGroupDescription(getGroupDescription());
		flaskGroupImpl.setCreatedDate(getCreatedDate());
		flaskGroupImpl.setCreatedBy(getCreatedBy());
		flaskGroupImpl.setIsActive(getIsActive());
		flaskGroupImpl.setIsDelete(getIsDelete());

		flaskGroupImpl.resetOriginalValues();

		return flaskGroupImpl;
	}

	@Override
	public int compareTo(FlaskGroup flaskGroup) {
		long primaryKey = flaskGroup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FlaskGroup)) {
			return false;
		}

		FlaskGroup flaskGroup = (FlaskGroup)obj;

		long primaryKey = flaskGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FlaskGroup> toCacheModel() {
		FlaskGroupCacheModel flaskGroupCacheModel = new FlaskGroupCacheModel();

		flaskGroupCacheModel.groupId = getGroupId();

		flaskGroupCacheModel.groupName = getGroupName();

		String groupName = flaskGroupCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			flaskGroupCacheModel.groupName = null;
		}

		flaskGroupCacheModel.groupDescription = getGroupDescription();

		String groupDescription = flaskGroupCacheModel.groupDescription;

		if ((groupDescription != null) && (groupDescription.length() == 0)) {
			flaskGroupCacheModel.groupDescription = null;
		}

		flaskGroupCacheModel.createdDate = getCreatedDate();

		String createdDate = flaskGroupCacheModel.createdDate;

		if ((createdDate != null) && (createdDate.length() == 0)) {
			flaskGroupCacheModel.createdDate = null;
		}

		flaskGroupCacheModel.createdBy = getCreatedBy();

		String createdBy = flaskGroupCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			flaskGroupCacheModel.createdBy = null;
		}

		flaskGroupCacheModel.isActive = getIsActive();

		flaskGroupCacheModel.isDelete = getIsDelete();

		return flaskGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{groupId=");
		sb.append(getGroupId());
		sb.append(", groupName=");
		sb.append(getGroupName());
		sb.append(", groupDescription=");
		sb.append(getGroupDescription());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.FlaskGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupName</column-name><column-value><![CDATA[");
		sb.append(getGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupDescription</column-name><column-value><![CDATA[");
		sb.append(getGroupDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FlaskGroup.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FlaskGroup.class
		};
	private long _groupId;
	private String _groupName;
	private String _groupDescription;
	private String _createdDate;
	private String _createdBy;
	private int _isActive;
	private int _isDelete;
	private FlaskGroup _escapedModel;
}