/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rumbasolutions.flask.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rumbasolutions.flask.model.SupplyList;
import com.rumbasolutions.flask.model.SupplyListModel;
import com.rumbasolutions.flask.model.SupplyListSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SupplyList service. Represents a row in the &quot;flasktailgate_SupplyList&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rumbasolutions.flask.model.SupplyListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SupplyListImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SupplyListImpl
 * @see com.rumbasolutions.flask.model.SupplyList
 * @see com.rumbasolutions.flask.model.SupplyListModel
 * @generated
 */
@JSON(strict = true)
public class SupplyListModelImpl extends BaseModelImpl<SupplyList>
	implements SupplyListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a supply list model instance should use the {@link com.rumbasolutions.flask.model.SupplyList} interface instead.
	 */
	public static final String TABLE_NAME = "flasktailgate_SupplyList";
	public static final Object[][] TABLE_COLUMNS = {
			{ "supplyListId", Types.BIGINT },
			{ "supplyListName", Types.VARCHAR },
			{ "isSystem", Types.BOOLEAN },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table flasktailgate_SupplyList (supplyListId LONG not null primary key,supplyListName VARCHAR(75) null,isSystem BOOLEAN,companyId LONG,userId LONG,createdDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table flasktailgate_SupplyList";
	public static final String ORDER_BY_JPQL = " ORDER BY supplyList.supplyListId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY flasktailgate_SupplyList.supplyListId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rumbasolutions.flask.model.SupplyList"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rumbasolutions.flask.model.SupplyList"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rumbasolutions.flask.model.SupplyList"),
			true);
	public static long ISSYSTEM_COLUMN_BITMASK = 1L;
	public static long SUPPLYLISTNAME_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long SUPPLYLISTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SupplyList toModel(SupplyListSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SupplyList model = new SupplyListImpl();

		model.setSupplyListId(soapModel.getSupplyListId());
		model.setSupplyListName(soapModel.getSupplyListName());
		model.setIsSystem(soapModel.getIsSystem());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SupplyList> toModels(SupplyListSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SupplyList> models = new ArrayList<SupplyList>(soapModels.length);

		for (SupplyListSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rumbasolutions.flask.model.SupplyList"));

	public SupplyListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _supplyListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSupplyListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _supplyListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SupplyList.class;
	}

	@Override
	public String getModelClassName() {
		return SupplyList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("supplyListId", getSupplyListId());
		attributes.put("supplyListName", getSupplyListName());
		attributes.put("isSystem", getIsSystem());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long supplyListId = (Long)attributes.get("supplyListId");

		if (supplyListId != null) {
			setSupplyListId(supplyListId);
		}

		String supplyListName = (String)attributes.get("supplyListName");

		if (supplyListName != null) {
			setSupplyListName(supplyListName);
		}

		Boolean isSystem = (Boolean)attributes.get("isSystem");

		if (isSystem != null) {
			setIsSystem(isSystem);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getSupplyListId() {
		return _supplyListId;
	}

	@Override
	public void setSupplyListId(long supplyListId) {
		_supplyListId = supplyListId;
	}

	@JSON
	@Override
	public String getSupplyListName() {
		if (_supplyListName == null) {
			return StringPool.BLANK;
		}
		else {
			return _supplyListName;
		}
	}

	@Override
	public void setSupplyListName(String supplyListName) {
		_columnBitmask |= SUPPLYLISTNAME_COLUMN_BITMASK;

		if (_originalSupplyListName == null) {
			_originalSupplyListName = _supplyListName;
		}

		_supplyListName = supplyListName;
	}

	public String getOriginalSupplyListName() {
		return GetterUtil.getString(_originalSupplyListName);
	}

	@JSON
	@Override
	public boolean getIsSystem() {
		return _isSystem;
	}

	@Override
	public boolean isIsSystem() {
		return _isSystem;
	}

	@Override
	public void setIsSystem(boolean isSystem) {
		_columnBitmask |= ISSYSTEM_COLUMN_BITMASK;

		if (!_setOriginalIsSystem) {
			_setOriginalIsSystem = true;

			_originalIsSystem = _isSystem;
		}

		_isSystem = isSystem;
	}

	public boolean getOriginalIsSystem() {
		return _originalIsSystem;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SupplyList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SupplyList toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SupplyList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SupplyListImpl supplyListImpl = new SupplyListImpl();

		supplyListImpl.setSupplyListId(getSupplyListId());
		supplyListImpl.setSupplyListName(getSupplyListName());
		supplyListImpl.setIsSystem(getIsSystem());
		supplyListImpl.setCompanyId(getCompanyId());
		supplyListImpl.setUserId(getUserId());
		supplyListImpl.setCreatedDate(getCreatedDate());
		supplyListImpl.setModifiedDate(getModifiedDate());

		supplyListImpl.resetOriginalValues();

		return supplyListImpl;
	}

	@Override
	public int compareTo(SupplyList supplyList) {
		long primaryKey = supplyList.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SupplyList)) {
			return false;
		}

		SupplyList supplyList = (SupplyList)obj;

		long primaryKey = supplyList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SupplyListModelImpl supplyListModelImpl = this;

		supplyListModelImpl._originalSupplyListName = supplyListModelImpl._supplyListName;

		supplyListModelImpl._originalIsSystem = supplyListModelImpl._isSystem;

		supplyListModelImpl._setOriginalIsSystem = false;

		supplyListModelImpl._originalUserId = supplyListModelImpl._userId;

		supplyListModelImpl._setOriginalUserId = false;

		supplyListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SupplyList> toCacheModel() {
		SupplyListCacheModel supplyListCacheModel = new SupplyListCacheModel();

		supplyListCacheModel.supplyListId = getSupplyListId();

		supplyListCacheModel.supplyListName = getSupplyListName();

		String supplyListName = supplyListCacheModel.supplyListName;

		if ((supplyListName != null) && (supplyListName.length() == 0)) {
			supplyListCacheModel.supplyListName = null;
		}

		supplyListCacheModel.isSystem = getIsSystem();

		supplyListCacheModel.companyId = getCompanyId();

		supplyListCacheModel.userId = getUserId();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			supplyListCacheModel.createdDate = createdDate.getTime();
		}
		else {
			supplyListCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			supplyListCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			supplyListCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return supplyListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{supplyListId=");
		sb.append(getSupplyListId());
		sb.append(", supplyListName=");
		sb.append(getSupplyListName());
		sb.append(", isSystem=");
		sb.append(getIsSystem());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.rumbasolutions.flask.model.SupplyList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>supplyListId</column-name><column-value><![CDATA[");
		sb.append(getSupplyListId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supplyListName</column-name><column-value><![CDATA[");
		sb.append(getSupplyListName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSystem</column-name><column-value><![CDATA[");
		sb.append(getIsSystem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SupplyList.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SupplyList.class
		};
	private long _supplyListId;
	private String _supplyListName;
	private String _originalSupplyListName;
	private boolean _isSystem;
	private boolean _originalIsSystem;
	private boolean _setOriginalIsSystem;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private SupplyList _escapedModel;
}